// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appv-primary-api-customer.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "AppvPrimaryApiCustomer.pbobjc.h"
#import "AppvBasic.pbobjc.h"
#import "AppvCustomer.pbobjc.h"
#import "AppvOss.pbobjc.h"
#import "AppvUser.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(appvapiCustomerServiceCategories);
GPBObjCClassDeclaration(appvapiCustomerServiceCategory);
GPBObjCClassDeclaration(appvapiIdEncode);
GPBObjCClassDeclaration(appvapiMIMEInfo);
GPBObjCClassDeclaration(appvapiOssEvents);
GPBObjCClassDeclaration(appvapiQuestion);
GPBObjCClassDeclaration(appvapiUnreadWorkOrders);
GPBObjCClassDeclaration(appvapiUserInfoBasic);
GPBObjCClassDeclaration(appvapiWorkOrder);
GPBObjCClassDeclaration(appvapiWorkOrderInstantMessage);

#pragma mark - appvapiAppvPrimaryApiCustomerRoot

@implementation appvapiAppvPrimaryApiCustomerRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - appvapiAppvPrimaryApiCustomerRoot_FileDescriptor

static GPBFileDescriptor *appvapiAppvPrimaryApiCustomerRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"appvapi"
                                                 objcPrefix:@"appvapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - appvapiListWorkOrderImResponse

@implementation appvapiListWorkOrderImResponse

@dynamic workOrderInstantMessagesArray, workOrderInstantMessagesArray_Count;

typedef struct appvapiListWorkOrderImResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *workOrderInstantMessagesArray;
} appvapiListWorkOrderImResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "workOrderInstantMessagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiWorkOrderInstantMessage),
        .number = appvapiListWorkOrderImResponse_FieldNumber_WorkOrderInstantMessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListWorkOrderImResponse__storage_, workOrderInstantMessagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListWorkOrderImResponse class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListWorkOrderImResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiReadImRequest

@implementation appvapiReadImRequest

@dynamic hasWorkOrderId, workOrderId;
@dynamic hasWorkOrderImId, workOrderImId;

typedef struct appvapiReadImRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *workOrderId;
  appvapiIdEncode *workOrderImId;
} appvapiReadImRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "workOrderId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiReadImRequest_FieldNumber_WorkOrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiReadImRequest__storage_, workOrderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "workOrderImId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiReadImRequest_FieldNumber_WorkOrderImId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiReadImRequest__storage_, workOrderImId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiReadImRequest class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiReadImRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiWorkOrderDetailResponse

@implementation appvapiWorkOrderDetailResponse

@dynamic hasWorkOrder, workOrder;
@dynamic workOrderInstantMessagesArray, workOrderInstantMessagesArray_Count;

typedef struct appvapiWorkOrderDetailResponse__storage_ {
  uint32_t _has_storage_[1];
  appvapiWorkOrder *workOrder;
  NSMutableArray *workOrderInstantMessagesArray;
} appvapiWorkOrderDetailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "workOrder",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiWorkOrder),
        .number = appvapiWorkOrderDetailResponse_FieldNumber_WorkOrder,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiWorkOrderDetailResponse__storage_, workOrder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "workOrderInstantMessagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiWorkOrderInstantMessage),
        .number = appvapiWorkOrderDetailResponse_FieldNumber_WorkOrderInstantMessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiWorkOrderDetailResponse__storage_, workOrderInstantMessagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiWorkOrderDetailResponse class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiWorkOrderDetailResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiCreateWorkOrderResponse

@implementation appvapiCreateWorkOrderResponse

@dynamic hasWorkOrderId, workOrderId;
@dynamic hasOssEvents, ossEvents;

typedef struct appvapiCreateWorkOrderResponse__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *workOrderId;
  appvapiOssEvents *ossEvents;
} appvapiCreateWorkOrderResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "workOrderId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiCreateWorkOrderResponse_FieldNumber_WorkOrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiCreateWorkOrderResponse__storage_, workOrderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ossEvents",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiOssEvents),
        .number = appvapiCreateWorkOrderResponse_FieldNumber_OssEvents,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiCreateWorkOrderResponse__storage_, ossEvents),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiCreateWorkOrderResponse class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiCreateWorkOrderResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListAllQuestionGroupByCategoryResponse

@implementation appvapiListAllQuestionGroupByCategoryResponse

@dynamic categoriesArray, categoriesArray_Count;

typedef struct appvapiListAllQuestionGroupByCategoryResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *categoriesArray;
} appvapiListAllQuestionGroupByCategoryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "categoriesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCustomerServiceCategories),
        .number = appvapiListAllQuestionGroupByCategoryResponse_FieldNumber_CategoriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListAllQuestionGroupByCategoryResponse__storage_, categoriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListAllQuestionGroupByCategoryResponse class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListAllQuestionGroupByCategoryResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiCreateWorkOrderRequest

@implementation appvapiCreateWorkOrderRequest

@dynamic hasCategoryId, categoryId;
@dynamic describeContent;
@dynamic describeImagesArray, describeImagesArray_Count;

typedef struct appvapiCreateWorkOrderRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *categoryId;
  NSString *describeContent;
  NSMutableArray *describeImagesArray;
} appvapiCreateWorkOrderRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "categoryId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiCreateWorkOrderRequest_FieldNumber_CategoryId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiCreateWorkOrderRequest__storage_, categoryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "describeContent",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCreateWorkOrderRequest_FieldNumber_DescribeContent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiCreateWorkOrderRequest__storage_, describeContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "describeImagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiMIMEInfo),
        .number = appvapiCreateWorkOrderRequest_FieldNumber_DescribeImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiCreateWorkOrderRequest__storage_, describeImagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiCreateWorkOrderRequest class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiCreateWorkOrderRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListMyWorkOrderResponse

@implementation appvapiListMyWorkOrderResponse

@dynamic workOrdersArray, workOrdersArray_Count;

typedef struct appvapiListMyWorkOrderResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *workOrdersArray;
} appvapiListMyWorkOrderResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "workOrdersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiWorkOrder),
        .number = appvapiListMyWorkOrderResponse_FieldNumber_WorkOrdersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListMyWorkOrderResponse__storage_, workOrdersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListMyWorkOrderResponse class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListMyWorkOrderResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiCheckUnreadMessagesResponse

@implementation appvapiCheckUnreadMessagesResponse

@dynamic unreadWorkOrderssArray, unreadWorkOrderssArray_Count;

typedef struct appvapiCheckUnreadMessagesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *unreadWorkOrderssArray;
} appvapiCheckUnreadMessagesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "unreadWorkOrderssArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiUnreadWorkOrders),
        .number = appvapiCheckUnreadMessagesResponse_FieldNumber_UnreadWorkOrderssArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiCheckUnreadMessagesResponse__storage_, unreadWorkOrderssArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiCheckUnreadMessagesResponse class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiCheckUnreadMessagesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiUnreadWorkOrders

@implementation appvapiUnreadWorkOrders

@dynamic hasId_p, id_p;
@dynamic workOrderStatus;
@dynamic time;

typedef struct appvapiUnreadWorkOrders__storage_ {
  uint32_t _has_storage_[1];
  appvapiWorkOrderStatus workOrderStatus;
  appvapiIdEncode *id_p;
  uint64_t time;
} appvapiUnreadWorkOrders__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiUnreadWorkOrders_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiUnreadWorkOrders__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "workOrderStatus",
        .dataTypeSpecific.enumDescFunc = appvapiWorkOrderStatus_EnumDescriptor,
        .number = appvapiUnreadWorkOrders_FieldNumber_WorkOrderStatus,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiUnreadWorkOrders__storage_, workOrderStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiUnreadWorkOrders_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiUnreadWorkOrders__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiUnreadWorkOrders class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiUnreadWorkOrders__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiUnreadWorkOrders_WorkOrderStatus_RawValue(appvapiUnreadWorkOrders *message) {
  GPBDescriptor *descriptor = [appvapiUnreadWorkOrders descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiUnreadWorkOrders_FieldNumber_WorkOrderStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiUnreadWorkOrders_WorkOrderStatus_RawValue(appvapiUnreadWorkOrders *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiUnreadWorkOrders descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiUnreadWorkOrders_FieldNumber_WorkOrderStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - appvapiWorkOrder

@implementation appvapiWorkOrder

@dynamic hasId_p, id_p;
@dynamic hasUserInfo, userInfo;
@dynamic hasCategory, category;
@dynamic workOrderStatus;
@dynamic describeContent;
@dynamic describeImagesArray, describeImagesArray_Count;
@dynamic startTime;
@dynamic isRead;

typedef struct appvapiWorkOrder__storage_ {
  uint32_t _has_storage_[1];
  appvapiWorkOrderStatus workOrderStatus;
  appvapiIdEncode *id_p;
  appvapiUserInfoBasic *userInfo;
  appvapiCustomerServiceCategory *category;
  NSString *describeContent;
  NSMutableArray *describeImagesArray;
  uint64_t startTime;
} appvapiWorkOrder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiWorkOrder_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiWorkOrder__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiUserInfoBasic),
        .number = appvapiWorkOrder_FieldNumber_UserInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiWorkOrder__storage_, userInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "category",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCustomerServiceCategory),
        .number = appvapiWorkOrder_FieldNumber_Category,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiWorkOrder__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "workOrderStatus",
        .dataTypeSpecific.enumDescFunc = appvapiWorkOrderStatus_EnumDescriptor,
        .number = appvapiWorkOrder_FieldNumber_WorkOrderStatus,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(appvapiWorkOrder__storage_, workOrderStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "describeContent",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiWorkOrder_FieldNumber_DescribeContent,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(appvapiWorkOrder__storage_, describeContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "describeImagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiMIMEInfo),
        .number = appvapiWorkOrder_FieldNumber_DescribeImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiWorkOrder__storage_, describeImagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiWorkOrder_FieldNumber_StartTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(appvapiWorkOrder__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "isRead",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiWorkOrder_FieldNumber_IsRead,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiWorkOrder class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiWorkOrder__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiWorkOrder_WorkOrderStatus_RawValue(appvapiWorkOrder *message) {
  GPBDescriptor *descriptor = [appvapiWorkOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiWorkOrder_FieldNumber_WorkOrderStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiWorkOrder_WorkOrderStatus_RawValue(appvapiWorkOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiWorkOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiWorkOrder_FieldNumber_WorkOrderStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - appvapiCustomerServiceCategory

@implementation appvapiCustomerServiceCategory

@dynamic hasId_p, id_p;
@dynamic category;

typedef struct appvapiCustomerServiceCategory__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *id_p;
  NSString *category;
} appvapiCustomerServiceCategory__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiCustomerServiceCategory_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiCustomerServiceCategory__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "category",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCustomerServiceCategory_FieldNumber_Category,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiCustomerServiceCategory__storage_, category),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiCustomerServiceCategory class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiCustomerServiceCategory__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiQuestion

@implementation appvapiQuestion

@dynamic hasId_p, id_p;
@dynamic hasCategoryId, categoryId;
@dynamic question;
@dynamic answer;
@dynamic enableWorkOrder;

typedef struct appvapiQuestion__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *id_p;
  appvapiIdEncode *categoryId;
  NSString *question;
  NSString *answer;
} appvapiQuestion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiQuestion_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiQuestion__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "categoryId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiQuestion_FieldNumber_CategoryId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiQuestion__storage_, categoryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "question",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiQuestion_FieldNumber_Question,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiQuestion__storage_, question),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "answer",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiQuestion_FieldNumber_Answer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(appvapiQuestion__storage_, answer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enableWorkOrder",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiQuestion_FieldNumber_EnableWorkOrder,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiQuestion class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiQuestion__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListCategoryResponse

@implementation appvapiListCategoryResponse

@dynamic categoryArray, categoryArray_Count;

typedef struct appvapiListCategoryResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *categoryArray;
} appvapiListCategoryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "categoryArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCustomerServiceCategory),
        .number = appvapiListCategoryResponse_FieldNumber_CategoryArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListCategoryResponse__storage_, categoryArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListCategoryResponse class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListCategoryResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiCustomerServiceCategories

@implementation appvapiCustomerServiceCategories

@dynamic hasId_p, id_p;
@dynamic category;
@dynamic questionsArray, questionsArray_Count;

typedef struct appvapiCustomerServiceCategories__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *id_p;
  NSString *category;
  NSMutableArray *questionsArray;
} appvapiCustomerServiceCategories__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiCustomerServiceCategories_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiCustomerServiceCategories__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "category",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCustomerServiceCategories_FieldNumber_Category,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiCustomerServiceCategories__storage_, category),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "questionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiQuestion),
        .number = appvapiCustomerServiceCategories_FieldNumber_QuestionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiCustomerServiceCategories__storage_, questionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiCustomerServiceCategories class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiCustomerServiceCategories__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListQuestionResponse

@implementation appvapiListQuestionResponse

@dynamic questionsArray, questionsArray_Count;

typedef struct appvapiListQuestionResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *questionsArray;
} appvapiListQuestionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "questionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiQuestion),
        .number = appvapiListQuestionResponse_FieldNumber_QuestionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListQuestionResponse__storage_, questionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListQuestionResponse class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListQuestionResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiWorkOrderInstantMessage

@implementation appvapiWorkOrderInstantMessage

@dynamic hasId_p, id_p;
@dynamic hasWorkOrderId, workOrderId;
@dynamic message;
@dynamic sender;
@dynamic sendTime;

typedef struct appvapiWorkOrderInstantMessage__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sender;
  appvapiIdEncode *id_p;
  appvapiIdEncode *workOrderId;
  NSString *message;
  uint64_t sendTime;
} appvapiWorkOrderInstantMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiWorkOrderInstantMessage_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiWorkOrderInstantMessage__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "workOrderId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiWorkOrderInstantMessage_FieldNumber_WorkOrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiWorkOrderInstantMessage__storage_, workOrderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiWorkOrderInstantMessage_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiWorkOrderInstantMessage__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiWorkOrderInstantMessage_FieldNumber_Sender,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(appvapiWorkOrderInstantMessage__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiWorkOrderInstantMessage_FieldNumber_SendTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(appvapiWorkOrderInstantMessage__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiWorkOrderInstantMessage class]
                                     rootClass:[appvapiAppvPrimaryApiCustomerRoot class]
                                          file:appvapiAppvPrimaryApiCustomerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiWorkOrderInstantMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
