// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appv-primary-api-visitor.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "AppvPrimaryApiVisitor.pbobjc.h"
#import "AppvBasic.pbobjc.h"
#import "AppvPrimaryBasic.pbobjc.h"
#import "AppvPrimaryCommunity.pbobjc.h"
#import "AppvUser.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(appvapiCommunityPost);
GPBObjCClassDeclaration(appvapiContentSvideoAppendList);
GPBObjCClassDeclaration(appvapiIdEncode);
GPBObjCClassDeclaration(appvapiUserInfoBasic);

#pragma mark - appvapiAppvPrimaryApiVisitorRoot

@implementation appvapiAppvPrimaryApiVisitorRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - appvapiAppvPrimaryApiVisitorRoot_FileDescriptor

static GPBFileDescriptor *appvapiAppvPrimaryApiVisitorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"appvapi"
                                                 objcPrefix:@"appvapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - appvapiListOthersShortVideoRequest

@implementation appvapiListOthersShortVideoRequest

@dynamic lastId;
@dynamic hasUid, uid;

typedef struct appvapiListOthersShortVideoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *lastId;
  appvapiIdEncode *uid;
} appvapiListOthersShortVideoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastId",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiListOthersShortVideoRequest_FieldNumber_LastId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListOthersShortVideoRequest__storage_, lastId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiListOthersShortVideoRequest_FieldNumber_Uid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiListOthersShortVideoRequest__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListOthersShortVideoRequest class]
                                     rootClass:[appvapiAppvPrimaryApiVisitorRoot class]
                                          file:appvapiAppvPrimaryApiVisitorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListOthersShortVideoRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiVisitUserInfoResponse

@implementation appvapiVisitUserInfoResponse

@dynamic hasInfo, info;
@dynamic hasSvideoList, svideoList;

typedef struct appvapiVisitUserInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  appvapiUserInfoBasic *info;
  appvapiContentSvideoAppendList *svideoList;
} appvapiVisitUserInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiUserInfoBasic),
        .number = appvapiVisitUserInfoResponse_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiVisitUserInfoResponse__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "svideoList",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiContentSvideoAppendList),
        .number = appvapiVisitUserInfoResponse_FieldNumber_SvideoList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiVisitUserInfoResponse__storage_, svideoList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiVisitUserInfoResponse class]
                                     rootClass:[appvapiAppvPrimaryApiVisitorRoot class]
                                          file:appvapiAppvPrimaryApiVisitorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiVisitUserInfoResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListUserCommunityPostsRequest

@implementation appvapiListUserCommunityPostsRequest

@dynamic hasUid, uid;
@dynamic hasLastId, lastId;

typedef struct appvapiListUserCommunityPostsRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *uid;
  appvapiIdEncode *lastId;
} appvapiListUserCommunityPostsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiListUserCommunityPostsRequest_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListUserCommunityPostsRequest__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiListUserCommunityPostsRequest_FieldNumber_LastId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiListUserCommunityPostsRequest__storage_, lastId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListUserCommunityPostsRequest class]
                                     rootClass:[appvapiAppvPrimaryApiVisitorRoot class]
                                          file:appvapiAppvPrimaryApiVisitorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListUserCommunityPostsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListUserCommunityPostsResponse

@implementation appvapiListUserCommunityPostsResponse

@dynamic hasInfo, info;
@dynamic communityPostsArray, communityPostsArray_Count;

typedef struct appvapiListUserCommunityPostsResponse__storage_ {
  uint32_t _has_storage_[1];
  appvapiUserInfoBasic *info;
  NSMutableArray *communityPostsArray;
} appvapiListUserCommunityPostsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiUserInfoBasic),
        .number = appvapiListUserCommunityPostsResponse_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListUserCommunityPostsResponse__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "communityPostsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCommunityPost),
        .number = appvapiListUserCommunityPostsResponse_FieldNumber_CommunityPostsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListUserCommunityPostsResponse__storage_, communityPostsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListUserCommunityPostsResponse class]
                                     rootClass:[appvapiAppvPrimaryApiVisitorRoot class]
                                          file:appvapiAppvPrimaryApiVisitorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListUserCommunityPostsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
