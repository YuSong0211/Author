// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appv-primary-api-social.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "AppvPrimaryApiSocial.pbobjc.h"
#import "AppvBasic.pbobjc.h"
#import "AppvComment.pbobjc.h"
#import "AppvPrimaryBasic.pbobjc.h"
#import "AppvUser.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(appvapiCommentInfo);
GPBObjCClassDeclaration(appvapiCommentReplyItem);
GPBObjCClassDeclaration(appvapiFollowingUser);
GPBObjCClassDeclaration(appvapiIdEncode);
GPBObjCClassDeclaration(appvapiUserInfoBasic);

#pragma mark - appvapiAppvPrimaryApiSocialRoot

@implementation appvapiAppvPrimaryApiSocialRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - appvapiAppvPrimaryApiSocialRoot_FileDescriptor

static GPBFileDescriptor *appvapiAppvPrimaryApiSocialRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"appvapi"
                                                 objcPrefix:@"appvapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum appvapiCommentCheckStatus

GPBEnumDescriptor *appvapiCommentCheckStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CommentCheckStatusUnPass\000CommentCheckSta"
        "tusPass\000CommentCheckStatusWaiting\000";
    static const int32_t values[] = {
        appvapiCommentCheckStatus_CommentCheckStatusUnPass,
        appvapiCommentCheckStatus_CommentCheckStatusPass,
        appvapiCommentCheckStatus_CommentCheckStatusWaiting,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(appvapiCommentCheckStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:appvapiCommentCheckStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      
    }
  }
  return descriptor;
}

BOOL appvapiCommentCheckStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case appvapiCommentCheckStatus_CommentCheckStatusUnPass:
    case appvapiCommentCheckStatus_CommentCheckStatusPass:
    case appvapiCommentCheckStatus_CommentCheckStatusWaiting:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - appvapiListHomeCommentRequest

@implementation appvapiListHomeCommentRequest

@dynamic hasSourceId, sourceId;
@dynamic commentSourceType;

typedef struct appvapiListHomeCommentRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiCommentSourceType commentSourceType;
  appvapiIdEncode *sourceId;
} appvapiListHomeCommentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sourceId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiListHomeCommentRequest_FieldNumber_SourceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListHomeCommentRequest__storage_, sourceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commentSourceType",
        .dataTypeSpecific.enumDescFunc = appvapiCommentSourceType_EnumDescriptor,
        .number = appvapiListHomeCommentRequest_FieldNumber_CommentSourceType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiListHomeCommentRequest__storage_, commentSourceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListHomeCommentRequest class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListHomeCommentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiListHomeCommentRequest_CommentSourceType_RawValue(appvapiListHomeCommentRequest *message) {
  GPBDescriptor *descriptor = [appvapiListHomeCommentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiListHomeCommentRequest_FieldNumber_CommentSourceType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiListHomeCommentRequest_CommentSourceType_RawValue(appvapiListHomeCommentRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiListHomeCommentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiListHomeCommentRequest_FieldNumber_CommentSourceType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - appvapiListCommentRequest

@implementation appvapiListCommentRequest

@dynamic hasSourceId, sourceId;
@dynamic hasLastId, lastId;
@dynamic homeCommentIdsArray, homeCommentIdsArray_Count;
@dynamic commentSourceType;

typedef struct appvapiListCommentRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiCommentSourceType commentSourceType;
  appvapiIdEncode *sourceId;
  appvapiIdEncode *lastId;
  NSMutableArray *homeCommentIdsArray;
} appvapiListCommentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sourceId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiListCommentRequest_FieldNumber_SourceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListCommentRequest__storage_, sourceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiListCommentRequest_FieldNumber_LastId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiListCommentRequest__storage_, lastId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "homeCommentIdsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiListCommentRequest_FieldNumber_HomeCommentIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListCommentRequest__storage_, homeCommentIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commentSourceType",
        .dataTypeSpecific.enumDescFunc = appvapiCommentSourceType_EnumDescriptor,
        .number = appvapiListCommentRequest_FieldNumber_CommentSourceType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiListCommentRequest__storage_, commentSourceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListCommentRequest class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListCommentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiListCommentRequest_CommentSourceType_RawValue(appvapiListCommentRequest *message) {
  GPBDescriptor *descriptor = [appvapiListCommentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiListCommentRequest_FieldNumber_CommentSourceType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiListCommentRequest_CommentSourceType_RawValue(appvapiListCommentRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiListCommentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiListCommentRequest_FieldNumber_CommentSourceType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - appvapiListCommentReplyRequest

@implementation appvapiListCommentReplyRequest

@dynamic hasCommentId, commentId;
@dynamic hasLastId, lastId;

typedef struct appvapiListCommentReplyRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *commentId;
  appvapiIdEncode *lastId;
} appvapiListCommentReplyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiListCommentReplyRequest_FieldNumber_CommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListCommentReplyRequest__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiListCommentReplyRequest_FieldNumber_LastId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiListCommentReplyRequest__storage_, lastId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListCommentReplyRequest class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListCommentReplyRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiCommentReplyRequest

@implementation appvapiCommentReplyRequest

@dynamic hasParentCommentId, parentCommentId;
@dynamic hasReplyCommentId, replyCommentId;
@dynamic content;

typedef struct appvapiCommentReplyRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *parentCommentId;
  appvapiIdEncode *replyCommentId;
  NSString *content;
} appvapiCommentReplyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentCommentId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiCommentReplyRequest_FieldNumber_ParentCommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiCommentReplyRequest__storage_, parentCommentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replyCommentId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiCommentReplyRequest_FieldNumber_ReplyCommentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiCommentReplyRequest__storage_, replyCommentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentReplyRequest_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiCommentReplyRequest__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiCommentReplyRequest class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiCommentReplyRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiNewCommentRequest

@implementation appvapiNewCommentRequest

@dynamic hasSourceId, sourceId;
@dynamic content;
@dynamic flag;
@dynamic commentSourceType;

typedef struct appvapiNewCommentRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiCommentSourceType commentSourceType;
  appvapiIdEncode *sourceId;
  NSString *content;
  NSString *flag;
} appvapiNewCommentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sourceId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiNewCommentRequest_FieldNumber_SourceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiNewCommentRequest__storage_, sourceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiNewCommentRequest_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiNewCommentRequest__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flag",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiNewCommentRequest_FieldNumber_Flag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiNewCommentRequest__storage_, flag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentSourceType",
        .dataTypeSpecific.enumDescFunc = appvapiCommentSourceType_EnumDescriptor,
        .number = appvapiNewCommentRequest_FieldNumber_CommentSourceType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(appvapiNewCommentRequest__storage_, commentSourceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiNewCommentRequest class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiNewCommentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiNewCommentRequest_CommentSourceType_RawValue(appvapiNewCommentRequest *message) {
  GPBDescriptor *descriptor = [appvapiNewCommentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiNewCommentRequest_FieldNumber_CommentSourceType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiNewCommentRequest_CommentSourceType_RawValue(appvapiNewCommentRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiNewCommentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiNewCommentRequest_FieldNumber_CommentSourceType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - appvapiCommentResponse

@implementation appvapiCommentResponse

@dynamic hasId_p, id_p;

typedef struct appvapiCommentResponse__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *id_p;
} appvapiCommentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiCommentResponse_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiCommentResponse__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiCommentResponse class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiCommentResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListCommentResponse

@implementation appvapiListCommentResponse

@dynamic commentsArray, commentsArray_Count;
@dynamic lastPage;
@dynamic commentCount;

typedef struct appvapiListCommentResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t commentCount;
  NSMutableArray *commentsArray;
} appvapiListCommentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCommentInfo),
        .number = appvapiListCommentResponse_FieldNumber_CommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListCommentResponse__storage_, commentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastPage",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiListCommentResponse_FieldNumber_LastPage,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "commentCount",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiListCommentResponse_FieldNumber_CommentCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiListCommentResponse__storage_, commentCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListCommentResponse class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListCommentResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListVideoCommentReplyResponse

@implementation appvapiListVideoCommentReplyResponse

@dynamic repliesArray, repliesArray_Count;
@dynamic lastPage;

typedef struct appvapiListVideoCommentReplyResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *repliesArray;
} appvapiListVideoCommentReplyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "repliesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCommentReplyItem),
        .number = appvapiListVideoCommentReplyResponse_FieldNumber_RepliesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListVideoCommentReplyResponse__storage_, repliesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastPage",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiListVideoCommentReplyResponse_FieldNumber_LastPage,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListVideoCommentReplyResponse class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListVideoCommentReplyResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiCommentInfo

@implementation appvapiCommentInfo

@dynamic hasCommentId, commentId;
@dynamic content;
@dynamic hasCommentUserInfo, commentUserInfo;
@dynamic isAuthor;
@dynamic starNumber;
@dynamic isCurrentUserStar;
@dynamic replyNumber;
@dynamic authorReplyParentListArray, authorReplyParentListArray_Count;
@dynamic createAt;
@dynamic delete_p;
@dynamic commentSourceType;
@dynamic commentCheckStatus;

typedef struct appvapiCommentInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t starNumber;
  uint32_t replyNumber;
  appvapiCommentSourceType commentSourceType;
  appvapiCommentCheckStatus commentCheckStatus;
  appvapiIdEncode *commentId;
  NSString *content;
  appvapiUserInfoBasic *commentUserInfo;
  NSMutableArray *authorReplyParentListArray;
  uint64_t createAt;
} appvapiCommentInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiCommentInfo_FieldNumber_CommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiCommentInfo__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentInfo_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiCommentInfo__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentUserInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiUserInfoBasic),
        .number = appvapiCommentInfo_FieldNumber_CommentUserInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiCommentInfo__storage_, commentUserInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isAuthor",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentInfo_FieldNumber_IsAuthor,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "starNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentInfo_FieldNumber_StarNumber,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(appvapiCommentInfo__storage_, starNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isCurrentUserStar",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentInfo_FieldNumber_IsCurrentUserStar,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "replyNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentInfo_FieldNumber_ReplyNumber,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(appvapiCommentInfo__storage_, replyNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "authorReplyParentListArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCommentReplyItem),
        .number = appvapiCommentInfo_FieldNumber_AuthorReplyParentListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiCommentInfo__storage_, authorReplyParentListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentInfo_FieldNumber_CreateAt,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(appvapiCommentInfo__storage_, createAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "delete_p",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentInfo_FieldNumber_Delete_p,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "commentSourceType",
        .dataTypeSpecific.enumDescFunc = appvapiCommentSourceType_EnumDescriptor,
        .number = appvapiCommentInfo_FieldNumber_CommentSourceType,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(appvapiCommentInfo__storage_, commentSourceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "commentCheckStatus",
        .dataTypeSpecific.enumDescFunc = appvapiCommentCheckStatus_EnumDescriptor,
        .number = appvapiCommentInfo_FieldNumber_CommentCheckStatus,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(appvapiCommentInfo__storage_, commentCheckStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiCommentInfo class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiCommentInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiCommentInfo_CommentSourceType_RawValue(appvapiCommentInfo *message) {
  GPBDescriptor *descriptor = [appvapiCommentInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiCommentInfo_FieldNumber_CommentSourceType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiCommentInfo_CommentSourceType_RawValue(appvapiCommentInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiCommentInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiCommentInfo_FieldNumber_CommentSourceType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t appvapiCommentInfo_CommentCheckStatus_RawValue(appvapiCommentInfo *message) {
  GPBDescriptor *descriptor = [appvapiCommentInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiCommentInfo_FieldNumber_CommentCheckStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiCommentInfo_CommentCheckStatus_RawValue(appvapiCommentInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiCommentInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiCommentInfo_FieldNumber_CommentCheckStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - appvapiCommentReplyItem

@implementation appvapiCommentReplyItem

@dynamic hasId_p, id_p;
@dynamic hasCommentUserInfo, commentUserInfo;
@dynamic replyType;
@dynamic hasCommentReplyUserInfo, commentReplyUserInfo;
@dynamic replyContent;
@dynamic starNumber;
@dynamic hasParentCommentId, parentCommentId;
@dynamic isAuthor;
@dynamic isCurrentUserStar;
@dynamic createAt;
@dynamic delete_p;
@dynamic commentSourceType;
@dynamic commentCheckStatus;

typedef struct appvapiCommentReplyItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t replyType;
  uint32_t starNumber;
  appvapiCommentSourceType commentSourceType;
  appvapiCommentCheckStatus commentCheckStatus;
  appvapiIdEncode *id_p;
  appvapiUserInfoBasic *commentUserInfo;
  appvapiUserInfoBasic *commentReplyUserInfo;
  NSString *replyContent;
  appvapiIdEncode *parentCommentId;
  uint64_t createAt;
} appvapiCommentReplyItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiCommentReplyItem_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiCommentReplyItem__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commentUserInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiUserInfoBasic),
        .number = appvapiCommentReplyItem_FieldNumber_CommentUserInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiCommentReplyItem__storage_, commentUserInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replyType",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentReplyItem_FieldNumber_ReplyType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiCommentReplyItem__storage_, replyType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "commentReplyUserInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiUserInfoBasic),
        .number = appvapiCommentReplyItem_FieldNumber_CommentReplyUserInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(appvapiCommentReplyItem__storage_, commentReplyUserInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replyContent",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentReplyItem_FieldNumber_ReplyContent,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(appvapiCommentReplyItem__storage_, replyContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "starNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentReplyItem_FieldNumber_StarNumber,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(appvapiCommentReplyItem__storage_, starNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "parentCommentId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiCommentReplyItem_FieldNumber_ParentCommentId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(appvapiCommentReplyItem__storage_, parentCommentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isAuthor",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentReplyItem_FieldNumber_IsAuthor,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isCurrentUserStar",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentReplyItem_FieldNumber_IsCurrentUserStar,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentReplyItem_FieldNumber_CreateAt,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(appvapiCommentReplyItem__storage_, createAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "delete_p",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiCommentReplyItem_FieldNumber_Delete_p,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "commentSourceType",
        .dataTypeSpecific.enumDescFunc = appvapiCommentSourceType_EnumDescriptor,
        .number = appvapiCommentReplyItem_FieldNumber_CommentSourceType,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(appvapiCommentReplyItem__storage_, commentSourceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "commentCheckStatus",
        .dataTypeSpecific.enumDescFunc = appvapiCommentCheckStatus_EnumDescriptor,
        .number = appvapiCommentReplyItem_FieldNumber_CommentCheckStatus,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(appvapiCommentReplyItem__storage_, commentCheckStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiCommentReplyItem class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiCommentReplyItem__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiCommentReplyItem_CommentSourceType_RawValue(appvapiCommentReplyItem *message) {
  GPBDescriptor *descriptor = [appvapiCommentReplyItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiCommentReplyItem_FieldNumber_CommentSourceType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiCommentReplyItem_CommentSourceType_RawValue(appvapiCommentReplyItem *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiCommentReplyItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiCommentReplyItem_FieldNumber_CommentSourceType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t appvapiCommentReplyItem_CommentCheckStatus_RawValue(appvapiCommentReplyItem *message) {
  GPBDescriptor *descriptor = [appvapiCommentReplyItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiCommentReplyItem_FieldNumber_CommentCheckStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiCommentReplyItem_CommentCheckStatus_RawValue(appvapiCommentReplyItem *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiCommentReplyItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiCommentReplyItem_FieldNumber_CommentCheckStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - appvapiFollowList

@implementation appvapiFollowList

@dynamic userArray, userArray_Count;

typedef struct appvapiFollowList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userArray;
} appvapiFollowList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiFollowingUser),
        .number = appvapiFollowList_FieldNumber_UserArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiFollowList__storage_, userArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiFollowList class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiFollowList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiFollowingUser

@implementation appvapiFollowingUser

@dynamic hasId_p, id_p;
@dynamic hasUserInfo, userInfo;

typedef struct appvapiFollowingUser__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *id_p;
  appvapiUserInfoBasic *userInfo;
} appvapiFollowingUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiFollowingUser_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiFollowingUser__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiUserInfoBasic),
        .number = appvapiFollowingUser_FieldNumber_UserInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiFollowingUser__storage_, userInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiFollowingUser class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiFollowingUser__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiFollowListResponse

@implementation appvapiFollowListResponse

@dynamic userArray, userArray_Count;

typedef struct appvapiFollowListResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userArray;
} appvapiFollowListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiFollowingUser),
        .number = appvapiFollowListResponse_FieldNumber_UserArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiFollowListResponse__storage_, userArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiFollowListResponse class]
                                     rootClass:[appvapiAppvPrimaryApiSocialRoot class]
                                          file:appvapiAppvPrimaryApiSocialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiFollowListResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
