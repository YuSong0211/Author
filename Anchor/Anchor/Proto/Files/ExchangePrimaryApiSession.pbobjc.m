// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange-primary-api-session.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ExchangePrimaryApiSession.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - serviceexchangeExchangePrimaryApiSessionRoot

@implementation serviceexchangeExchangePrimaryApiSessionRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - serviceexchangeExchangePrimaryApiSessionRoot_FileDescriptor

static GPBFileDescriptor *serviceexchangeExchangePrimaryApiSessionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"exchange"
                                                 objcPrefix:@"serviceexchange"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - serviceexchangeGetJwtTokenRequest

@implementation serviceexchangeGetJwtTokenRequest


typedef struct serviceexchangeGetJwtTokenRequest__storage_ {
  uint32_t _has_storage_[1];
} serviceexchangeGetJwtTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeGetJwtTokenRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiSessionRoot class]
                                          file:serviceexchangeExchangePrimaryApiSessionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(serviceexchangeGetJwtTokenRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeGetJwtTokenResponse

@implementation serviceexchangeGetJwtTokenResponse

@dynamic jwtToken;

typedef struct serviceexchangeGetJwtTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *jwtToken;
} serviceexchangeGetJwtTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "jwtToken",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeGetJwtTokenResponse_FieldNumber_JwtToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeGetJwtTokenResponse__storage_, jwtToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeGetJwtTokenResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiSessionRoot class]
                                          file:serviceexchangeExchangePrimaryApiSessionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeGetJwtTokenResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeKeepAliveRequest

@implementation serviceexchangeKeepAliveRequest


typedef struct serviceexchangeKeepAliveRequest__storage_ {
  uint32_t _has_storage_[1];
} serviceexchangeKeepAliveRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeKeepAliveRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiSessionRoot class]
                                          file:serviceexchangeExchangePrimaryApiSessionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(serviceexchangeKeepAliveRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeKeepAliveResponse

@implementation serviceexchangeKeepAliveResponse


typedef struct serviceexchangeKeepAliveResponse__storage_ {
  uint32_t _has_storage_[1];
} serviceexchangeKeepAliveResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeKeepAliveResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiSessionRoot class]
                                          file:serviceexchangeExchangePrimaryApiSessionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(serviceexchangeKeepAliveResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
