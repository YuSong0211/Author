// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appv-h5-api-paid.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "AppvH5ApiPaid.pbobjc.h"
#import "AppvBasic.pbobjc.h"
#import "AppvVip.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(appvapiIdEncode);
GPBObjCClassDeclaration(appvapiRechargeSalePrice);
GPBObjCClassDeclaration(appvapiVipProduct);
GPBObjCClassDeclaration(appvapiVipProductPrice);
GPBObjCClassDeclaration(appvapiVipRightInterests);
GPBObjCClassDeclaration(appvapiWalletRechargeProduct);

#pragma mark - appvapiAppvH5ApiPaidRoot

@implementation appvapiAppvH5ApiPaidRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - appvapiAppvH5ApiPaidRoot_FileDescriptor

static GPBFileDescriptor *appvapiAppvH5ApiPaidRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"appvapi.h5"
                                                 objcPrefix:@"appvapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum appvapiPaymentType

GPBEnumDescriptor *appvapiPaymentType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PaymentTypeUnspecified\000PaymentTypeApple\000"
        "PaymentTypeAmount\000";
    static const int32_t values[] = {
        appvapiPaymentType_PaymentTypeUnspecified,
        appvapiPaymentType_PaymentTypeApple,
        appvapiPaymentType_PaymentTypeAmount,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(appvapiPaymentType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:appvapiPaymentType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      
    }
  }
  return descriptor;
}

BOOL appvapiPaymentType_IsValidValue(int32_t value__) {
  switch (value__) {
    case appvapiPaymentType_PaymentTypeUnspecified:
    case appvapiPaymentType_PaymentTypeApple:
    case appvapiPaymentType_PaymentTypeAmount:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - appvapiListWalletRechargeProductsRequest

@implementation appvapiListWalletRechargeProductsRequest

@dynamic paymentType;

typedef struct appvapiListWalletRechargeProductsRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiPaymentType paymentType;
} appvapiListWalletRechargeProductsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paymentType",
        .dataTypeSpecific.enumDescFunc = appvapiPaymentType_EnumDescriptor,
        .number = appvapiListWalletRechargeProductsRequest_FieldNumber_PaymentType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListWalletRechargeProductsRequest__storage_, paymentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListWalletRechargeProductsRequest class]
                                     rootClass:[appvapiAppvH5ApiPaidRoot class]
                                          file:appvapiAppvH5ApiPaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListWalletRechargeProductsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiListWalletRechargeProductsRequest_PaymentType_RawValue(appvapiListWalletRechargeProductsRequest *message) {
  GPBDescriptor *descriptor = [appvapiListWalletRechargeProductsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiListWalletRechargeProductsRequest_FieldNumber_PaymentType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiListWalletRechargeProductsRequest_PaymentType_RawValue(appvapiListWalletRechargeProductsRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiListWalletRechargeProductsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiListWalletRechargeProductsRequest_FieldNumber_PaymentType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - appvapiListWalletRechargeProductsResponse

@implementation appvapiListWalletRechargeProductsResponse

@dynamic walletRechargeProductsArray, walletRechargeProductsArray_Count;

typedef struct appvapiListWalletRechargeProductsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *walletRechargeProductsArray;
} appvapiListWalletRechargeProductsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "walletRechargeProductsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiWalletRechargeProduct),
        .number = appvapiListWalletRechargeProductsResponse_FieldNumber_WalletRechargeProductsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListWalletRechargeProductsResponse__storage_, walletRechargeProductsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListWalletRechargeProductsResponse class]
                                     rootClass:[appvapiAppvH5ApiPaidRoot class]
                                          file:appvapiAppvH5ApiPaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListWalletRechargeProductsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListVipProductsRequest

@implementation appvapiListVipProductsRequest

@dynamic paymentType;

typedef struct appvapiListVipProductsRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiPaymentType paymentType;
} appvapiListVipProductsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paymentType",
        .dataTypeSpecific.enumDescFunc = appvapiPaymentType_EnumDescriptor,
        .number = appvapiListVipProductsRequest_FieldNumber_PaymentType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListVipProductsRequest__storage_, paymentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListVipProductsRequest class]
                                     rootClass:[appvapiAppvH5ApiPaidRoot class]
                                          file:appvapiAppvH5ApiPaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListVipProductsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiListVipProductsRequest_PaymentType_RawValue(appvapiListVipProductsRequest *message) {
  GPBDescriptor *descriptor = [appvapiListVipProductsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiListVipProductsRequest_FieldNumber_PaymentType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiListVipProductsRequest_PaymentType_RawValue(appvapiListVipProductsRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiListVipProductsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiListVipProductsRequest_FieldNumber_PaymentType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - appvapiListVipProductsResponse

@implementation appvapiListVipProductsResponse

@dynamic vipPriceArray, vipPriceArray_Count;
@dynamic vipsArray, vipsArray_Count;
@dynamic vipRightInterestssArray, vipRightInterestssArray_Count;

typedef struct appvapiListVipProductsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *vipPriceArray;
  NSMutableArray *vipsArray;
  NSMutableArray *vipRightInterestssArray;
} appvapiListVipProductsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "vipPriceArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiVipProductPrice),
        .number = appvapiListVipProductsResponse_FieldNumber_VipPriceArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListVipProductsResponse__storage_, vipPriceArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "vipsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiVipProduct),
        .number = appvapiListVipProductsResponse_FieldNumber_VipsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListVipProductsResponse__storage_, vipsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "vipRightInterestssArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiVipRightInterests),
        .number = appvapiListVipProductsResponse_FieldNumber_VipRightInterestssArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListVipProductsResponse__storage_, vipRightInterestssArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListVipProductsResponse class]
                                     rootClass:[appvapiAppvH5ApiPaidRoot class]
                                          file:appvapiAppvH5ApiPaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListVipProductsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000vipPrice\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiVipBuyRequest

@implementation appvapiVipBuyRequest

@dynamic hasId_p, id_p;

typedef struct appvapiVipBuyRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *id_p;
} appvapiVipBuyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiVipBuyRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiVipBuyRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiVipBuyRequest class]
                                     rootClass:[appvapiAppvH5ApiPaidRoot class]
                                          file:appvapiAppvH5ApiPaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiVipBuyRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiVipBuyResponse

@implementation appvapiVipBuyResponse

@dynamic jwtVipBuy;

typedef struct appvapiVipBuyResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *jwtVipBuy;
} appvapiVipBuyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "jwtVipBuy",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiVipBuyResponse_FieldNumber_JwtVipBuy,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiVipBuyResponse__storage_, jwtVipBuy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiVipBuyResponse class]
                                     rootClass:[appvapiAppvH5ApiPaidRoot class]
                                          file:appvapiAppvH5ApiPaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiVipBuyResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiWalletRechargeProduct

@implementation appvapiWalletRechargeProduct

@dynamic hasId_p, id_p;
@dynamic rechargeAmount;
@dynamic displayPrice;
@dynamic giveVipDays;
@dynamic giveVipType;
@dynamic hasRechargeSalePrice, rechargeSalePrice;

typedef struct appvapiWalletRechargeProduct__storage_ {
  uint32_t _has_storage_[1];
  uint32_t rechargeAmount;
  uint32_t displayPrice;
  uint32_t giveVipDays;
  appvapiVipProductType giveVipType;
  appvapiIdEncode *id_p;
  appvapiRechargeSalePrice *rechargeSalePrice;
} appvapiWalletRechargeProduct__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiWalletRechargeProduct_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiWalletRechargeProduct__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rechargeAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiWalletRechargeProduct_FieldNumber_RechargeAmount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiWalletRechargeProduct__storage_, rechargeAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "displayPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiWalletRechargeProduct_FieldNumber_DisplayPrice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiWalletRechargeProduct__storage_, displayPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giveVipDays",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiWalletRechargeProduct_FieldNumber_GiveVipDays,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(appvapiWalletRechargeProduct__storage_, giveVipDays),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "giveVipType",
        .dataTypeSpecific.enumDescFunc = appvapiVipProductType_EnumDescriptor,
        .number = appvapiWalletRechargeProduct_FieldNumber_GiveVipType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(appvapiWalletRechargeProduct__storage_, giveVipType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rechargeSalePrice",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiRechargeSalePrice),
        .number = appvapiWalletRechargeProduct_FieldNumber_RechargeSalePrice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(appvapiWalletRechargeProduct__storage_, rechargeSalePrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiWalletRechargeProduct class]
                                     rootClass:[appvapiAppvH5ApiPaidRoot class]
                                          file:appvapiAppvH5ApiPaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiWalletRechargeProduct__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiWalletRechargeProduct_GiveVipType_RawValue(appvapiWalletRechargeProduct *message) {
  GPBDescriptor *descriptor = [appvapiWalletRechargeProduct descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiWalletRechargeProduct_FieldNumber_GiveVipType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiWalletRechargeProduct_GiveVipType_RawValue(appvapiWalletRechargeProduct *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiWalletRechargeProduct descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiWalletRechargeProduct_FieldNumber_GiveVipType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - appvapiWalletRechargeRequest

@implementation appvapiWalletRechargeRequest

@dynamic hasId_p, id_p;

typedef struct appvapiWalletRechargeRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *id_p;
} appvapiWalletRechargeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiWalletRechargeRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiWalletRechargeRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiWalletRechargeRequest class]
                                     rootClass:[appvapiAppvH5ApiPaidRoot class]
                                          file:appvapiAppvH5ApiPaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiWalletRechargeRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiWalletRechargeResponse

@implementation appvapiWalletRechargeResponse

@dynamic orderJwtToken;

typedef struct appvapiWalletRechargeResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderJwtToken;
} appvapiWalletRechargeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderJwtToken",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiWalletRechargeResponse_FieldNumber_OrderJwtToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiWalletRechargeResponse__storage_, orderJwtToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiWalletRechargeResponse class]
                                     rootClass:[appvapiAppvH5ApiPaidRoot class]
                                          file:appvapiAppvH5ApiPaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiWalletRechargeResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
