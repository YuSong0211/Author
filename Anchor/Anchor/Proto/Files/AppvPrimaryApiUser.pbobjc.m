// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appv-primary-api-user.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "AppvPrimaryApiUser.pbobjc.h"
#import "AppvBasic.pbobjc.h"
#import "AppvOss.pbobjc.h"
#import "AppvUser.pbobjc.h"
#import "UtilBasic.pbobjc.h"
#import "AppvVip.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(appvapiIdEncode);
GPBObjCClassDeclaration(appvapiInviteUser);
GPBObjCClassDeclaration(appvapiMIMEInfo);
GPBObjCClassDeclaration(appvapiUserInfoBasic);
GPBObjCClassDeclaration(utilpbdatametadataStrWithClean);

#pragma mark - appvapiAppvPrimaryApiUserRoot

@implementation appvapiAppvPrimaryApiUserRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - appvapiAppvPrimaryApiUserRoot_FileDescriptor

static GPBFileDescriptor *appvapiAppvPrimaryApiUserRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"appvapi"
                                                 objcPrefix:@"appvapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - appvapiListTalentUserRequest

@implementation appvapiListTalentUserRequest

@dynamic creationType;
@dynamic page;

typedef struct appvapiListTalentUserRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t creationType;
  uint64_t page;
} appvapiListTalentUserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "creationType",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiListTalentUserRequest_FieldNumber_CreationType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListTalentUserRequest__storage_, creationType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiListTalentUserRequest_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiListTalentUserRequest__storage_, page),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListTalentUserRequest class]
                                     rootClass:[appvapiAppvPrimaryApiUserRoot class]
                                          file:appvapiAppvPrimaryApiUserRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListTalentUserRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListTalentUserResponse

@implementation appvapiListTalentUserResponse

@dynamic userListArray, userListArray_Count;

typedef struct appvapiListTalentUserResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userListArray;
} appvapiListTalentUserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userListArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiUserInfoBasic),
        .number = appvapiListTalentUserResponse_FieldNumber_UserListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListTalentUserResponse__storage_, userListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListTalentUserResponse class]
                                     rootClass:[appvapiAppvPrimaryApiUserRoot class]
                                          file:appvapiAppvPrimaryApiUserRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListTalentUserResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiUpdateUserInfo

@implementation appvapiUpdateUserInfo

@dynamic nickname;
@dynamic gender;
@dynamic hasIntro, intro;

typedef struct appvapiUpdateUserInfo__storage_ {
  uint32_t _has_storage_[1];
  appvapiGenders gender;
  NSString *nickname;
  utilpbdatametadataStrWithClean *intro;
} appvapiUpdateUserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nickname",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiUpdateUserInfo_FieldNumber_Nickname,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiUpdateUserInfo__storage_, nickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.enumDescFunc = appvapiGenders_EnumDescriptor,
        .number = appvapiUpdateUserInfo_FieldNumber_Gender,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiUpdateUserInfo__storage_, gender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "intro",
        .dataTypeSpecific.clazz = GPBObjCClass(utilpbdatametadataStrWithClean),
        .number = appvapiUpdateUserInfo_FieldNumber_Intro,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiUpdateUserInfo__storage_, intro),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiUpdateUserInfo class]
                                     rootClass:[appvapiAppvPrimaryApiUserRoot class]
                                          file:appvapiAppvPrimaryApiUserRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiUpdateUserInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiUpdateUserInfo_Gender_RawValue(appvapiUpdateUserInfo *message) {
  GPBDescriptor *descriptor = [appvapiUpdateUserInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiUpdateUserInfo_FieldNumber_Gender];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiUpdateUserInfo_Gender_RawValue(appvapiUpdateUserInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiUpdateUserInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiUpdateUserInfo_FieldNumber_Gender];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - appvapiUpdateAvatarRequest

@implementation appvapiUpdateAvatarRequest

@dynamic hasAvatarFile, avatarFile;

typedef struct appvapiUpdateAvatarRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiMIMEInfo *avatarFile;
} appvapiUpdateAvatarRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "avatarFile",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiMIMEInfo),
        .number = appvapiUpdateAvatarRequest_FieldNumber_AvatarFile,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiUpdateAvatarRequest__storage_, avatarFile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiUpdateAvatarRequest class]
                                     rootClass:[appvapiAppvPrimaryApiUserRoot class]
                                          file:appvapiAppvPrimaryApiUserRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiUpdateAvatarRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiGetInviteUserCountResponse

@implementation appvapiGetInviteUserCountResponse

@dynamic inviteUserCount;

typedef struct appvapiGetInviteUserCountResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t inviteUserCount;
} appvapiGetInviteUserCountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviteUserCount",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiGetInviteUserCountResponse_FieldNumber_InviteUserCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiGetInviteUserCountResponse__storage_, inviteUserCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiGetInviteUserCountResponse class]
                                     rootClass:[appvapiAppvPrimaryApiUserRoot class]
                                          file:appvapiAppvPrimaryApiUserRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiGetInviteUserCountResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListInviteUsersResponse

@implementation appvapiListInviteUsersResponse

@dynamic usersArray, usersArray_Count;

typedef struct appvapiListInviteUsersResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
} appvapiListInviteUsersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiInviteUser),
        .number = appvapiListInviteUsersResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListInviteUsersResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListInviteUsersResponse class]
                                     rootClass:[appvapiAppvPrimaryApiUserRoot class]
                                          file:appvapiAppvPrimaryApiUserRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListInviteUsersResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiInviteUser

@implementation appvapiInviteUser

@dynamic hasUsers, users;
@dynamic inviteTime;

typedef struct appvapiInviteUser__storage_ {
  uint32_t _has_storage_[1];
  appvapiUserInfoBasic *users;
  uint64_t inviteTime;
} appvapiInviteUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "users",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiUserInfoBasic),
        .number = appvapiInviteUser_FieldNumber_Users,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiInviteUser__storage_, users),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inviteTime",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiInviteUser_FieldNumber_InviteTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiInviteUser__storage_, inviteTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiInviteUser class]
                                     rootClass:[appvapiAppvPrimaryApiUserRoot class]
                                          file:appvapiAppvPrimaryApiUserRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiInviteUser__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiReceiveInviteRequest

@implementation appvapiReceiveInviteRequest

@dynamic shareCode;

typedef struct appvapiReceiveInviteRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *shareCode;
} appvapiReceiveInviteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "shareCode",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiReceiveInviteRequest_FieldNumber_ShareCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiReceiveInviteRequest__storage_, shareCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiReceiveInviteRequest class]
                                     rootClass:[appvapiAppvPrimaryApiUserRoot class]
                                          file:appvapiAppvPrimaryApiUserRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiReceiveInviteRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiGetInviteMeCodeResponse

@implementation appvapiGetInviteMeCodeResponse

@dynamic shareCode;

typedef struct appvapiGetInviteMeCodeResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *shareCode;
} appvapiGetInviteMeCodeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "shareCode",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiGetInviteMeCodeResponse_FieldNumber_ShareCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiGetInviteMeCodeResponse__storage_, shareCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiGetInviteMeCodeResponse class]
                                     rootClass:[appvapiAppvPrimaryApiUserRoot class]
                                          file:appvapiAppvPrimaryApiUserRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiGetInviteMeCodeResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiVideoPlayListResponse

@implementation appvapiVideoPlayListResponse

@dynamic todayPlayVideoIdsArray, todayPlayVideoIdsArray_Count;

typedef struct appvapiVideoPlayListResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *todayPlayVideoIdsArray;
} appvapiVideoPlayListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "todayPlayVideoIdsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiVideoPlayListResponse_FieldNumber_TodayPlayVideoIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiVideoPlayListResponse__storage_, todayPlayVideoIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiVideoPlayListResponse class]
                                     rootClass:[appvapiAppvPrimaryApiUserRoot class]
                                          file:appvapiAppvPrimaryApiUserRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiVideoPlayListResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
