// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange-primary-api-chat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ExchangePrimaryApiChat.pbobjc.h"
#import "ExchangePrimaryMsg.pbobjc.h"
#import "UtilBasicIdentity.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(serviceexchangeMessageContent);
GPBObjCClassDeclaration(serviceexchangeSendMimeMsgRequest);
GPBObjCClassDeclaration(serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime);
GPBObjCClassDeclaration(serviceexchangeSendMsgBasicInfo);
GPBObjCClassDeclaration(serviceexchangeSendTextMsgRequest);
GPBObjCClassDeclaration(serviceexchangeSendTextMsgRequest_SendMsgBodyUserText);
GPBObjCClassDeclaration(serviceexchangeVersionId);
GPBObjCClassDeclaration(utilidentitysdkIdEncode);

#pragma mark - serviceexchangeExchangePrimaryApiChatRoot

@implementation serviceexchangeExchangePrimaryApiChatRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor

static GPBFileDescriptor *serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"exchange"
                                                 objcPrefix:@"serviceexchange"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - serviceexchangeSendTextMsgRequest

@implementation serviceexchangeSendTextMsgRequest

@dynamic hasUid, uid;
@dynamic hasMsgBody, msgBody;
@dynamic clientSendTime;
@dynamic hasRefMsgVersionId, refMsgVersionId;

typedef struct serviceexchangeSendTextMsgRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *uid;
  serviceexchangeSendTextMsgRequest_SendMsgBodyUserText *msgBody;
  serviceexchangeVersionId *refMsgVersionId;
  uint64_t clientSendTime;
} serviceexchangeSendTextMsgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeSendTextMsgRequest_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeSendTextMsgRequest__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgBody",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeSendTextMsgRequest_SendMsgBodyUserText),
        .number = serviceexchangeSendTextMsgRequest_FieldNumber_MsgBody,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeSendTextMsgRequest__storage_, msgBody),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientSendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeSendTextMsgRequest_FieldNumber_ClientSendTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeSendTextMsgRequest__storage_, clientSendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "refMsgVersionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeSendTextMsgRequest_FieldNumber_RefMsgVersionId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceexchangeSendTextMsgRequest__storage_, refMsgVersionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeSendTextMsgRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiChatRoot class]
                                          file:serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeSendTextMsgRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeSendTextMsgRequest_SendMsgBodyUserText

@implementation serviceexchangeSendTextMsgRequest_SendMsgBodyUserText

@dynamic content;
@dynamic refUidsArray, refUidsArray_Count;

typedef struct serviceexchangeSendTextMsgRequest_SendMsgBodyUserText__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
  NSMutableArray *refUidsArray;
} serviceexchangeSendTextMsgRequest_SendMsgBodyUserText__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeSendTextMsgRequest_SendMsgBodyUserText_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeSendTextMsgRequest_SendMsgBodyUserText__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "refUidsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeSendTextMsgRequest_SendMsgBodyUserText_FieldNumber_RefUidsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeSendTextMsgRequest_SendMsgBodyUserText__storage_, refUidsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeSendTextMsgRequest_SendMsgBodyUserText class]
                                     rootClass:[serviceexchangeExchangePrimaryApiChatRoot class]
                                          file:serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeSendTextMsgRequest_SendMsgBodyUserText__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(serviceexchangeSendTextMsgRequest)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeSendTextMsgResponse

@implementation serviceexchangeSendTextMsgResponse

@dynamic hasSendMsgBasicInfo, sendMsgBasicInfo;

typedef struct serviceexchangeSendTextMsgResponse__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeSendMsgBasicInfo *sendMsgBasicInfo;
} serviceexchangeSendTextMsgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendMsgBasicInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeSendMsgBasicInfo),
        .number = serviceexchangeSendTextMsgResponse_FieldNumber_SendMsgBasicInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeSendTextMsgResponse__storage_, sendMsgBasicInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeSendTextMsgResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiChatRoot class]
                                          file:serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeSendTextMsgResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeSendMimeMsgRequest

@implementation serviceexchangeSendMimeMsgRequest

@dynamic hasUid, uid;
@dynamic hasMsgBody, msgBody;
@dynamic clientSendTime;

typedef struct serviceexchangeSendMimeMsgRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *uid;
  serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime *msgBody;
  uint64_t clientSendTime;
} serviceexchangeSendMimeMsgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeSendMimeMsgRequest_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeSendMimeMsgRequest__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgBody",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime),
        .number = serviceexchangeSendMimeMsgRequest_FieldNumber_MsgBody,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeSendMimeMsgRequest__storage_, msgBody),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientSendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeSendMimeMsgRequest_FieldNumber_ClientSendTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeSendMimeMsgRequest__storage_, clientSendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeSendMimeMsgRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiChatRoot class]
                                          file:serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeSendMimeMsgRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime

@implementation serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime

@dynamic URL;
@dynamic mimeType;

typedef struct serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeMimeType mimeType;
  NSString *URL;
} serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.enumDescFunc = serviceexchangeMimeType_EnumDescriptor,
        .number = serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime_FieldNumber_MimeType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime__storage_, mimeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime class]
                                     rootClass:[serviceexchangeExchangePrimaryApiChatRoot class]
                                          file:serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(serviceexchangeSendMimeMsgRequest)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime_MimeType_RawValue(serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime *message) {
  GPBDescriptor *descriptor = [serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime_FieldNumber_MimeType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetserviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime_MimeType_RawValue(serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime *message, int32_t value) {
  GPBDescriptor *descriptor = [serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceexchangeSendMimeMsgRequest_SendMsgBodyUserMime_FieldNumber_MimeType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - serviceexchangeSendMimeMsgResponse

@implementation serviceexchangeSendMimeMsgResponse

@dynamic hasSendMsgBasicInfo, sendMsgBasicInfo;

typedef struct serviceexchangeSendMimeMsgResponse__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeSendMsgBasicInfo *sendMsgBasicInfo;
} serviceexchangeSendMimeMsgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendMsgBasicInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeSendMsgBasicInfo),
        .number = serviceexchangeSendMimeMsgResponse_FieldNumber_SendMsgBasicInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeSendMimeMsgResponse__storage_, sendMsgBasicInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeSendMimeMsgResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiChatRoot class]
                                          file:serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeSendMimeMsgResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeAckMsgRequest

@implementation serviceexchangeAckMsgRequest

@dynamic hasVersionId, versionId;
@dynamic eventName;

typedef struct serviceexchangeAckMsgRequest__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeVersionId *versionId;
  NSString *eventName;
} serviceexchangeAckMsgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "versionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeAckMsgRequest_FieldNumber_VersionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeAckMsgRequest__storage_, versionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "eventName",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeAckMsgRequest_FieldNumber_EventName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeAckMsgRequest__storage_, eventName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeAckMsgRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiChatRoot class]
                                          file:serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeAckMsgRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeAckMsgResponse

@implementation serviceexchangeAckMsgResponse


typedef struct serviceexchangeAckMsgResponse__storage_ {
  uint32_t _has_storage_[1];
} serviceexchangeAckMsgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeAckMsgResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiChatRoot class]
                                          file:serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(serviceexchangeAckMsgResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeMoreMsgRequest

@implementation serviceexchangeMoreMsgRequest

@dynamic hasGroupId, groupId;
@dynamic hasLastVersionId, lastVersionId;
@dynamic hasMsgVersionId, msgVersionId;

typedef struct serviceexchangeMoreMsgRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *groupId;
  serviceexchangeVersionId *lastVersionId;
  serviceexchangeVersionId *msgVersionId;
} serviceexchangeMoreMsgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeMoreMsgRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeMoreMsgRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastVersionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeMoreMsgRequest_FieldNumber_LastVersionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeMoreMsgRequest__storage_, lastVersionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgVersionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeMoreMsgRequest_FieldNumber_MsgVersionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeMoreMsgRequest__storage_, msgVersionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeMoreMsgRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiChatRoot class]
                                          file:serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeMoreMsgRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeMoreMsgResponse

@implementation serviceexchangeMoreMsgResponse

@dynamic messageContentsArray, messageContentsArray_Count;
@dynamic hasNext;

typedef struct serviceexchangeMoreMsgResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messageContentsArray;
} serviceexchangeMoreMsgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageContentsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeMessageContent),
        .number = serviceexchangeMoreMsgResponse_FieldNumber_MessageContentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeMoreMsgResponse__storage_, messageContentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hasNext",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeMoreMsgResponse_FieldNumber_HasNext,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeMoreMsgResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiChatRoot class]
                                          file:serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeMoreMsgResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeSendMsgBasicInfo

@implementation serviceexchangeSendMsgBasicInfo

@dynamic hasVersionId, versionId;
@dynamic sendTime;
@dynamic hasGroupId, groupId;

typedef struct serviceexchangeSendMsgBasicInfo__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeVersionId *versionId;
  utilidentitysdkIdEncode *groupId;
  uint64_t sendTime;
} serviceexchangeSendMsgBasicInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "versionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeSendMsgBasicInfo_FieldNumber_VersionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeSendMsgBasicInfo__storage_, versionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeSendMsgBasicInfo_FieldNumber_SendTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeSendMsgBasicInfo__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeSendMsgBasicInfo_FieldNumber_GroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeSendMsgBasicInfo__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeSendMsgBasicInfo class]
                                     rootClass:[serviceexchangeExchangePrimaryApiChatRoot class]
                                          file:serviceexchangeExchangePrimaryApiChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeSendMsgBasicInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
