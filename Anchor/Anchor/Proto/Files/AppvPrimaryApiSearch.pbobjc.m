// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appv-primary-api-search.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "AppvPrimaryApiSearch.pbobjc.h"
#import "AppvBasic.pbobjc.h"
#import "AppvPrimaryCommunity.pbobjc.h"
#import "AppvPrimaryContent.pbobjc.h"
#import "AppvUser.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(appvapiCommunityPost);
GPBObjCClassDeclaration(appvapiContentSvideo);
GPBObjCClassDeclaration(appvapiHotWord);
GPBObjCClassDeclaration(appvapiIdEncode);
GPBObjCClassDeclaration(appvapiUserInfoBasic);

#pragma mark - appvapiAppvPrimaryApiSearchRoot

@implementation appvapiAppvPrimaryApiSearchRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - appvapiAppvPrimaryApiSearchRoot_FileDescriptor

static GPBFileDescriptor *appvapiAppvPrimaryApiSearchRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"appvapi"
                                                 objcPrefix:@"appvapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - appvapiSearchSVideoByKeywordsRequest

@implementation appvapiSearchSVideoByKeywordsRequest

@dynamic keyword;
@dynamic current;

typedef struct appvapiSearchSVideoByKeywordsRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t current;
  NSString *keyword;
} appvapiSearchSVideoByKeywordsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyword",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiSearchSVideoByKeywordsRequest_FieldNumber_Keyword,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiSearchSVideoByKeywordsRequest__storage_, keyword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "current",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiSearchSVideoByKeywordsRequest_FieldNumber_Current,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiSearchSVideoByKeywordsRequest__storage_, current),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiSearchSVideoByKeywordsRequest class]
                                     rootClass:[appvapiAppvPrimaryApiSearchRoot class]
                                          file:appvapiAppvPrimaryApiSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiSearchSVideoByKeywordsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiSearchSVideoByKeywordsResponse

@implementation appvapiSearchSVideoByKeywordsResponse

@dynamic videosArray, videosArray_Count;

typedef struct appvapiSearchSVideoByKeywordsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *videosArray;
} appvapiSearchSVideoByKeywordsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "videosArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiContentSvideo),
        .number = appvapiSearchSVideoByKeywordsResponse_FieldNumber_VideosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiSearchSVideoByKeywordsResponse__storage_, videosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiSearchSVideoByKeywordsResponse class]
                                     rootClass:[appvapiAppvPrimaryApiSearchRoot class]
                                          file:appvapiAppvPrimaryApiSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiSearchSVideoByKeywordsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiSearchPostsRequest

@implementation appvapiSearchPostsRequest

@dynamic keyword;
@dynamic current;

typedef struct appvapiSearchPostsRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t current;
  NSString *keyword;
} appvapiSearchPostsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyword",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiSearchPostsRequest_FieldNumber_Keyword,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiSearchPostsRequest__storage_, keyword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "current",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiSearchPostsRequest_FieldNumber_Current,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiSearchPostsRequest__storage_, current),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiSearchPostsRequest class]
                                     rootClass:[appvapiAppvPrimaryApiSearchRoot class]
                                          file:appvapiAppvPrimaryApiSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiSearchPostsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiSearchPostsResponse

@implementation appvapiSearchPostsResponse

@dynamic communityPostArray, communityPostArray_Count;

typedef struct appvapiSearchPostsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *communityPostArray;
} appvapiSearchPostsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "communityPostArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCommunityPost),
        .number = appvapiSearchPostsResponse_FieldNumber_CommunityPostArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiSearchPostsResponse__storage_, communityPostArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiSearchPostsResponse class]
                                     rootClass:[appvapiAppvPrimaryApiSearchRoot class]
                                          file:appvapiAppvPrimaryApiSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiSearchPostsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListHotWordsResponse

@implementation appvapiListHotWordsResponse

@dynamic hotWordsArray, hotWordsArray_Count;

typedef struct appvapiListHotWordsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *hotWordsArray;
} appvapiListHotWordsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hotWordsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiHotWord),
        .number = appvapiListHotWordsResponse_FieldNumber_HotWordsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListHotWordsResponse__storage_, hotWordsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListHotWordsResponse class]
                                     rootClass:[appvapiAppvPrimaryApiSearchRoot class]
                                          file:appvapiAppvPrimaryApiSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListHotWordsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiHotWord

@implementation appvapiHotWord

@dynamic hasId_p, id_p;
@dynamic text;

typedef struct appvapiHotWord__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *id_p;
  NSString *text;
} appvapiHotWord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiHotWord_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiHotWord__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "text",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiHotWord_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiHotWord__storage_, text),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiHotWord class]
                                     rootClass:[appvapiAppvPrimaryApiSearchRoot class]
                                          file:appvapiAppvPrimaryApiSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiHotWord__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiSearchUserRequest

@implementation appvapiSearchUserRequest

@dynamic keyword;
@dynamic current;

typedef struct appvapiSearchUserRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t current;
  NSString *keyword;
} appvapiSearchUserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyword",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiSearchUserRequest_FieldNumber_Keyword,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiSearchUserRequest__storage_, keyword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "current",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiSearchUserRequest_FieldNumber_Current,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiSearchUserRequest__storage_, current),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiSearchUserRequest class]
                                     rootClass:[appvapiAppvPrimaryApiSearchRoot class]
                                          file:appvapiAppvPrimaryApiSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiSearchUserRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiSearchUserResponse

@implementation appvapiSearchUserResponse

@dynamic userInfoBasicsArray, userInfoBasicsArray_Count;

typedef struct appvapiSearchUserResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userInfoBasicsArray;
} appvapiSearchUserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userInfoBasicsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiUserInfoBasic),
        .number = appvapiSearchUserResponse_FieldNumber_UserInfoBasicsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiSearchUserResponse__storage_, userInfoBasicsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiSearchUserResponse class]
                                     rootClass:[appvapiAppvPrimaryApiSearchRoot class]
                                          file:appvapiAppvPrimaryApiSearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiSearchUserResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
