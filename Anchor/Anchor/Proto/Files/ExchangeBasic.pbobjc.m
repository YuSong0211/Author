// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange-basic.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "ExchangeBasic.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - serviceexchangeExchangeBasicRoot

@implementation serviceexchangeExchangeBasicRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - serviceexchangeExchangeBasicRoot_FileDescriptor

static GPBFileDescriptor *serviceexchangeExchangeBasicRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"exchange"
                                                 objcPrefix:@"serviceexchange"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum serviceexchangeGenders

GPBEnumDescriptor *serviceexchangeGenders_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Nosex\000Male\000Female\000";
    static const int32_t values[] = {
        serviceexchangeGenders_None,
        serviceexchangeGenders_Nosex,
        serviceexchangeGenders_Male,
        serviceexchangeGenders_Female,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(serviceexchangeGenders)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:serviceexchangeGenders_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      
    }
  }
  return descriptor;
}

BOOL serviceexchangeGenders_IsValidValue(int32_t value__) {
  switch (value__) {
    case serviceexchangeGenders_None:
    case serviceexchangeGenders_Nosex:
    case serviceexchangeGenders_Male:
    case serviceexchangeGenders_Female:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - serviceexchangeEmptyRequest

@implementation serviceexchangeEmptyRequest


typedef struct serviceexchangeEmptyRequest__storage_ {
  uint32_t _has_storage_[1];
} serviceexchangeEmptyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeEmptyRequest class]
                                     rootClass:[serviceexchangeExchangeBasicRoot class]
                                          file:serviceexchangeExchangeBasicRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(serviceexchangeEmptyRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeEmptyResponse

@implementation serviceexchangeEmptyResponse


typedef struct serviceexchangeEmptyResponse__storage_ {
  uint32_t _has_storage_[1];
} serviceexchangeEmptyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeEmptyResponse class]
                                     rootClass:[serviceexchangeExchangeBasicRoot class]
                                          file:serviceexchangeExchangeBasicRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(serviceexchangeEmptyResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeMessageCount

@implementation serviceexchangeMessageCount

@dynamic totalUnread;

typedef struct serviceexchangeMessageCount__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalUnread;
} serviceexchangeMessageCount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "totalUnread",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeMessageCount_FieldNumber_TotalUnread,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeMessageCount__storage_, totalUnread),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeMessageCount class]
                                     rootClass:[serviceexchangeExchangeBasicRoot class]
                                          file:serviceexchangeExchangeBasicRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeMessageCount__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeMIMEInfo

@implementation serviceexchangeMIMEInfo

@dynamic URL;
@dynamic fileByteSize;
@dynamic aspectRatio;
@dynamic extra;

typedef struct serviceexchangeMIMEInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
  NSString *aspectRatio;
  NSString *extra;
  uint64_t fileByteSize;
} serviceexchangeMIMEInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeMIMEInfo_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeMIMEInfo__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileByteSize",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeMIMEInfo_FieldNumber_FileByteSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeMIMEInfo__storage_, fileByteSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "aspectRatio",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeMIMEInfo_FieldNumber_AspectRatio,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeMIMEInfo__storage_, aspectRatio),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extra",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeMIMEInfo_FieldNumber_Extra,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceexchangeMIMEInfo__storage_, extra),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeMIMEInfo class]
                                     rootClass:[serviceexchangeExchangeBasicRoot class]
                                          file:serviceexchangeExchangeBasicRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeMIMEInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
