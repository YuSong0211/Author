// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appv-primary-api-rank.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "AppvPrimaryApiRank.pbobjc.h"
#import "AppvPrimaryBasic.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - appvapiAppvPrimaryApiRankRoot

@implementation appvapiAppvPrimaryApiRankRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - appvapiAppvPrimaryApiRankRoot_FileDescriptor

static GPBFileDescriptor *appvapiAppvPrimaryApiRankRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"appvapi"
                                                 objcPrefix:@"appvapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum appvapiRankRule

GPBEnumDescriptor *appvapiRankRule_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RankRuleUnspecified\000RankRuleDay\000RankRule"
        "Week\000RankRuleMonth\000RankRuleYear\000";
    static const int32_t values[] = {
        appvapiRankRule_RankRuleUnspecified,
        appvapiRankRule_RankRuleDay,
        appvapiRankRule_RankRuleWeek,
        appvapiRankRule_RankRuleMonth,
        appvapiRankRule_RankRuleYear,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(appvapiRankRule)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:appvapiRankRule_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      
    }
  }
  return descriptor;
}

BOOL appvapiRankRule_IsValidValue(int32_t value__) {
  switch (value__) {
    case appvapiRankRule_RankRuleUnspecified:
    case appvapiRankRule_RankRuleDay:
    case appvapiRankRule_RankRuleWeek:
    case appvapiRankRule_RankRuleMonth:
    case appvapiRankRule_RankRuleYear:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - appvapiVideoRankRequest

@implementation appvapiVideoRankRequest

@dynamic rankRule;
@dynamic offset;

typedef struct appvapiVideoRankRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiRankRule rankRule;
  uint32_t offset;
} appvapiVideoRankRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankRule",
        .dataTypeSpecific.enumDescFunc = appvapiRankRule_EnumDescriptor,
        .number = appvapiVideoRankRequest_FieldNumber_RankRule,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiVideoRankRequest__storage_, rankRule),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiVideoRankRequest_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiVideoRankRequest__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiVideoRankRequest class]
                                     rootClass:[appvapiAppvPrimaryApiRankRoot class]
                                          file:appvapiAppvPrimaryApiRankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiVideoRankRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiVideoRankRequest_RankRule_RawValue(appvapiVideoRankRequest *message) {
  GPBDescriptor *descriptor = [appvapiVideoRankRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiVideoRankRequest_FieldNumber_RankRule];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiVideoRankRequest_RankRule_RawValue(appvapiVideoRankRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiVideoRankRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiVideoRankRequest_FieldNumber_RankRule];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
