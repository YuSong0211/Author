// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange-primary-api-group.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "ExchangePrimaryApiGroup.pbobjc.h"
#import "ExchangePrimaryMsg.pbobjc.h"
#import "UtilBasicIdentity.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(serviceexchangeChatGroupListInfo);
GPBObjCClassDeclaration(serviceexchangeChatUser);
GPBObjCClassDeclaration(serviceexchangeMessageContent);
GPBObjCClassDeclaration(serviceexchangeVersionId);
GPBObjCClassDeclaration(utilidentitysdkIdEncode);

#pragma mark - serviceexchangeExchangePrimaryApiGroupRoot

@implementation serviceexchangeExchangePrimaryApiGroupRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - serviceexchangeExchangePrimaryApiGroupRoot_FileDescriptor

static GPBFileDescriptor *serviceexchangeExchangePrimaryApiGroupRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"exchange"
                                                 objcPrefix:@"serviceexchange"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum serviceexchangeChatGroupStatus

GPBEnumDescriptor *serviceexchangeChatGroupStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ChatGroupStatusUnspecified\000ChatGroupStat"
        "usUpdate\000ChatGroupStatusDel\000";
    static const int32_t values[] = {
        serviceexchangeChatGroupStatus_ChatGroupStatusUnspecified,
        serviceexchangeChatGroupStatus_ChatGroupStatusUpdate,
        serviceexchangeChatGroupStatus_ChatGroupStatusDel,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(serviceexchangeChatGroupStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:serviceexchangeChatGroupStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      
    }
  }
  return descriptor;
}

BOOL serviceexchangeChatGroupStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case serviceexchangeChatGroupStatus_ChatGroupStatusUnspecified:
    case serviceexchangeChatGroupStatus_ChatGroupStatusUpdate:
    case serviceexchangeChatGroupStatus_ChatGroupStatusDel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - serviceexchangeListChatGroupRequest

@implementation serviceexchangeListChatGroupRequest

@dynamic hasLastId, lastId;
@dynamic hasGroupVersionId, groupVersionId;

typedef struct serviceexchangeListChatGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *lastId;
  serviceexchangeVersionId *groupVersionId;
} serviceexchangeListChatGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeListChatGroupRequest_FieldNumber_LastId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeListChatGroupRequest__storage_, lastId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupVersionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeListChatGroupRequest_FieldNumber_GroupVersionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeListChatGroupRequest__storage_, groupVersionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeListChatGroupRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiGroupRoot class]
                                          file:serviceexchangeExchangePrimaryApiGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeListChatGroupRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeListChatGroupResponse

@implementation serviceexchangeListChatGroupResponse

@dynamic groupInfosArray, groupInfosArray_Count;
@dynamic hasNext;

typedef struct serviceexchangeListChatGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *groupInfosArray;
} serviceexchangeListChatGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupInfosArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeChatGroupListInfo),
        .number = serviceexchangeListChatGroupResponse_FieldNumber_GroupInfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeListChatGroupResponse__storage_, groupInfosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hasNext",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeListChatGroupResponse_FieldNumber_HasNext,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeListChatGroupResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiGroupRoot class]
                                          file:serviceexchangeExchangePrimaryApiGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeListChatGroupResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeReadMsgRequest

@implementation serviceexchangeReadMsgRequest

@dynamic hasGroupId, groupId;
@dynamic hasMsgVersionId, msgVersionId;

typedef struct serviceexchangeReadMsgRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *groupId;
  serviceexchangeVersionId *msgVersionId;
} serviceexchangeReadMsgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeReadMsgRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeReadMsgRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgVersionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeReadMsgRequest_FieldNumber_MsgVersionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeReadMsgRequest__storage_, msgVersionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeReadMsgRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiGroupRoot class]
                                          file:serviceexchangeExchangePrimaryApiGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeReadMsgRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeReadMsgResponse

@implementation serviceexchangeReadMsgResponse

@dynamic hasLastMsgVersionId, lastMsgVersionId;

typedef struct serviceexchangeReadMsgResponse__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeVersionId *lastMsgVersionId;
} serviceexchangeReadMsgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastMsgVersionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeReadMsgResponse_FieldNumber_LastMsgVersionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeReadMsgResponse__storage_, lastMsgVersionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeReadMsgResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiGroupRoot class]
                                          file:serviceexchangeExchangePrimaryApiGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeReadMsgResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeChatGroupListInfo

@implementation serviceexchangeChatGroupListInfo

@dynamic hasGroupId, groupId;
@dynamic hasVersionId, versionId;
@dynamic groupStatus;
@dynamic unreadMsgCount;
@dynamic hasLastMsgVersionId, lastMsgVersionId;
@dynamic onTop;
@dynamic usersArray, usersArray_Count;
@dynamic lastMessageContentsArray, lastMessageContentsArray_Count;
@dynamic moreUnreadMsg;

typedef struct serviceexchangeChatGroupListInfo__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeChatGroupStatus groupStatus;
  uint32_t unreadMsgCount;
  utilidentitysdkIdEncode *groupId;
  serviceexchangeVersionId *versionId;
  serviceexchangeVersionId *lastMsgVersionId;
  NSMutableArray *usersArray;
  NSMutableArray *lastMessageContentsArray;
} serviceexchangeChatGroupListInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeChatGroupListInfo_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeChatGroupListInfo__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "versionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeChatGroupListInfo_FieldNumber_VersionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeChatGroupListInfo__storage_, versionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupStatus",
        .dataTypeSpecific.enumDescFunc = serviceexchangeChatGroupStatus_EnumDescriptor,
        .number = serviceexchangeChatGroupListInfo_FieldNumber_GroupStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeChatGroupListInfo__storage_, groupStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "unreadMsgCount",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeChatGroupListInfo_FieldNumber_UnreadMsgCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceexchangeChatGroupListInfo__storage_, unreadMsgCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lastMsgVersionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeChatGroupListInfo_FieldNumber_LastMsgVersionId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(serviceexchangeChatGroupListInfo__storage_, lastMsgVersionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "onTop",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeChatGroupListInfo_FieldNumber_OnTop,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeChatUser),
        .number = serviceexchangeChatGroupListInfo_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeChatGroupListInfo__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastMessageContentsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeMessageContent),
        .number = serviceexchangeChatGroupListInfo_FieldNumber_LastMessageContentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeChatGroupListInfo__storage_, lastMessageContentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "moreUnreadMsg",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeChatGroupListInfo_FieldNumber_MoreUnreadMsg,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeChatGroupListInfo class]
                                     rootClass:[serviceexchangeExchangePrimaryApiGroupRoot class]
                                          file:serviceexchangeExchangePrimaryApiGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeChatGroupListInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t serviceexchangeChatGroupListInfo_GroupStatus_RawValue(serviceexchangeChatGroupListInfo *message) {
  GPBDescriptor *descriptor = [serviceexchangeChatGroupListInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceexchangeChatGroupListInfo_FieldNumber_GroupStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetserviceexchangeChatGroupListInfo_GroupStatus_RawValue(serviceexchangeChatGroupListInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [serviceexchangeChatGroupListInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceexchangeChatGroupListInfo_FieldNumber_GroupStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - serviceexchangeRemoveGroupRequest

@implementation serviceexchangeRemoveGroupRequest

@dynamic hasGroupId, groupId;
@dynamic hasGroupVersionId, groupVersionId;

typedef struct serviceexchangeRemoveGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *groupId;
  serviceexchangeVersionId *groupVersionId;
} serviceexchangeRemoveGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeRemoveGroupRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeRemoveGroupRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupVersionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeRemoveGroupRequest_FieldNumber_GroupVersionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeRemoveGroupRequest__storage_, groupVersionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeRemoveGroupRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiGroupRoot class]
                                          file:serviceexchangeExchangePrimaryApiGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeRemoveGroupRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeRemoveGroupResponse

@implementation serviceexchangeRemoveGroupResponse


typedef struct serviceexchangeRemoveGroupResponse__storage_ {
  uint32_t _has_storage_[1];
} serviceexchangeRemoveGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeRemoveGroupResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiGroupRoot class]
                                          file:serviceexchangeExchangePrimaryApiGroupRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(serviceexchangeRemoveGroupResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
