// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uc-primary-api-sign.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "UcPrimaryApiSign.pbobjc.h"
#import "UcAccount.pbobjc.h"
#import "UcSms.pbobjc.h"
#import "UcBasic.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(serviceucBindAccounts);
GPBObjCClassDeclaration(serviceucDeviceInfo);
GPBObjCClassDeclaration(serviceucSmsValid);
GPBObjCClassDeclaration(serviceucTelephone);

#pragma mark - serviceucUcPrimaryApiSignRoot

@implementation serviceucUcPrimaryApiSignRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - serviceucUcPrimaryApiSignRoot_FileDescriptor

static GPBFileDescriptor *serviceucUcPrimaryApiSignRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"uc"
                                                 objcPrefix:@"serviceuc"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum serviceucOSName

GPBEnumDescriptor *serviceucOSName_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OsNameIos\000OsNameAndroid\000";
    static const int32_t values[] = {
        serviceucOSName_OsNameIos,
        serviceucOSName_OsNameAndroid,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(serviceucOSName)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:serviceucOSName_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      
    }
  }
  return descriptor;
}

BOOL serviceucOSName_IsValidValue(int32_t value__) {
  switch (value__) {
    case serviceucOSName_OsNameIos:
    case serviceucOSName_OsNameAndroid:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - serviceucSignInGmRequest

@implementation serviceucSignInGmRequest

@dynamic uid;

typedef struct serviceucSignInGmRequest__storage_ {
  uint32_t _has_storage_[1];
  uint64_t uid;
} serviceucSignInGmRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucSignInGmRequest_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceucSignInGmRequest__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceucSignInGmRequest class]
                                     rootClass:[serviceucUcPrimaryApiSignRoot class]
                                          file:serviceucUcPrimaryApiSignRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceucSignInGmRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceucJwtTokenResponse

@implementation serviceucJwtTokenResponse

@dynamic jwtToken;

typedef struct serviceucJwtTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *jwtToken;
} serviceucJwtTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "jwtToken",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucJwtTokenResponse_FieldNumber_JwtToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceucJwtTokenResponse__storage_, jwtToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceucJwtTokenResponse class]
                                     rootClass:[serviceucUcPrimaryApiSignRoot class]
                                          file:serviceucUcPrimaryApiSignRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceucJwtTokenResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceucTokenRequest

@implementation serviceucTokenRequest


typedef struct serviceucTokenRequest__storage_ {
  uint32_t _has_storage_[1];
} serviceucTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceucTokenRequest class]
                                     rootClass:[serviceucUcPrimaryApiSignRoot class]
                                          file:serviceucUcPrimaryApiSignRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(serviceucTokenRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceucGuestRequest

@implementation serviceucGuestRequest

@dynamic uuid;
@dynamic shareCode;
@dynamic hasDeviceInfo, deviceInfo;

typedef struct serviceucGuestRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  NSString *shareCode;
  serviceucDeviceInfo *deviceInfo;
} serviceucGuestRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucGuestRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceucGuestRequest__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shareCode",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucGuestRequest_FieldNumber_ShareCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceucGuestRequest__storage_, shareCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceucDeviceInfo),
        .number = serviceucGuestRequest_FieldNumber_DeviceInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceucGuestRequest__storage_, deviceInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceucGuestRequest class]
                                     rootClass:[serviceucUcPrimaryApiSignRoot class]
                                          file:serviceucUcPrimaryApiSignRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceucGuestRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceucTelephoneSignInRequest

@implementation serviceucTelephoneSignInRequest

@dynamic hasSms, sms;
@dynamic hasTel, tel;
@dynamic uuid;
@dynamic hasDeviceInfo, deviceInfo;

typedef struct serviceucTelephoneSignInRequest__storage_ {
  uint32_t _has_storage_[1];
  serviceucSmsValid *sms;
  serviceucTelephone *tel;
  NSString *uuid;
  serviceucDeviceInfo *deviceInfo;
} serviceucTelephoneSignInRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sms",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceucSmsValid),
        .number = serviceucTelephoneSignInRequest_FieldNumber_Sms,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceucTelephoneSignInRequest__storage_, sms),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tel",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceucTelephone),
        .number = serviceucTelephoneSignInRequest_FieldNumber_Tel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceucTelephoneSignInRequest__storage_, tel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucTelephoneSignInRequest_FieldNumber_Uuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceucTelephoneSignInRequest__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceucDeviceInfo),
        .number = serviceucTelephoneSignInRequest_FieldNumber_DeviceInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceucTelephoneSignInRequest__storage_, deviceInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceucTelephoneSignInRequest class]
                                     rootClass:[serviceucUcPrimaryApiSignRoot class]
                                          file:serviceucUcPrimaryApiSignRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceucTelephoneSignInRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceucAccountAccessResponse

@implementation serviceucAccountAccessResponse

@dynamic ucToken;
@dynamic hasBind, bind;
@dynamic uuid;

typedef struct serviceucAccountAccessResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *ucToken;
  serviceucBindAccounts *bind;
  NSString *uuid;
} serviceucAccountAccessResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ucToken",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucAccountAccessResponse_FieldNumber_UcToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceucAccountAccessResponse__storage_, ucToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bind",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceucBindAccounts),
        .number = serviceucAccountAccessResponse_FieldNumber_Bind,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceucAccountAccessResponse__storage_, bind),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucAccountAccessResponse_FieldNumber_Uuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceucAccountAccessResponse__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceucAccountAccessResponse class]
                                     rootClass:[serviceucUcPrimaryApiSignRoot class]
                                          file:serviceucUcPrimaryApiSignRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceucAccountAccessResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceucSignOutRequest

@implementation serviceucSignOutRequest


typedef struct serviceucSignOutRequest__storage_ {
  uint32_t _has_storage_[1];
} serviceucSignOutRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceucSignOutRequest class]
                                     rootClass:[serviceucUcPrimaryApiSignRoot class]
                                          file:serviceucUcPrimaryApiSignRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(serviceucSignOutRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceucSignOutResponse

@implementation serviceucSignOutResponse


typedef struct serviceucSignOutResponse__storage_ {
  uint32_t _has_storage_[1];
} serviceucSignOutResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceucSignOutResponse class]
                                     rootClass:[serviceucUcPrimaryApiSignRoot class]
                                          file:serviceucUcPrimaryApiSignRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(serviceucSignOutResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceucDeviceInfo

@implementation serviceucDeviceInfo

@dynamic uuid;
@dynamic androidId;
@dynamic brand;
@dynamic idfa;
@dynamic imei;
@dynamic model;
@dynamic osName;
@dynamic osVersion;

typedef struct serviceucDeviceInfo__storage_ {
  uint32_t _has_storage_[1];
  serviceucOSName osName;
  NSString *uuid;
  NSString *androidId;
  NSString *brand;
  NSString *idfa;
  NSString *imei;
  NSString *model;
  NSString *osVersion;
} serviceucDeviceInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucDeviceInfo_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceucDeviceInfo__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidId",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucDeviceInfo_FieldNumber_AndroidId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceucDeviceInfo__storage_, androidId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "brand",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucDeviceInfo_FieldNumber_Brand,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceucDeviceInfo__storage_, brand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idfa",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucDeviceInfo_FieldNumber_Idfa,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceucDeviceInfo__storage_, idfa),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imei",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucDeviceInfo_FieldNumber_Imei,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(serviceucDeviceInfo__storage_, imei),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "model",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucDeviceInfo_FieldNumber_Model,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(serviceucDeviceInfo__storage_, model),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osName",
        .dataTypeSpecific.enumDescFunc = serviceucOSName_EnumDescriptor,
        .number = serviceucDeviceInfo_FieldNumber_OsName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(serviceucDeviceInfo__storage_, osName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "osVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucDeviceInfo_FieldNumber_OsVersion,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(serviceucDeviceInfo__storage_, osVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceucDeviceInfo class]
                                     rootClass:[serviceucUcPrimaryApiSignRoot class]
                                          file:serviceucUcPrimaryApiSignRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceucDeviceInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t serviceucDeviceInfo_OsName_RawValue(serviceucDeviceInfo *message) {
  GPBDescriptor *descriptor = [serviceucDeviceInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceucDeviceInfo_FieldNumber_OsName];
  return GPBGetMessageRawEnumField(message, field);
}

void SetserviceucDeviceInfo_OsName_RawValue(serviceucDeviceInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [serviceucDeviceInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceucDeviceInfo_FieldNumber_OsName];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - serviceucBindAccounts

@implementation serviceucBindAccounts

@dynamic uuid;
@dynamic hasTel, tel;

typedef struct serviceucBindAccounts__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  serviceucTelephone *tel;
} serviceucBindAccounts__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceucBindAccounts_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceucBindAccounts__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tel",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceucTelephone),
        .number = serviceucBindAccounts_FieldNumber_Tel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceucBindAccounts__storage_, tel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceucBindAccounts class]
                                     rootClass:[serviceucUcPrimaryApiSignRoot class]
                                          file:serviceucUcPrimaryApiSignRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceucBindAccounts__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
