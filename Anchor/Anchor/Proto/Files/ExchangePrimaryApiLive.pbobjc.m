// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange-primary-api-live.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "ExchangePrimaryApiLive.pbobjc.h"
#import "ExchangeBasic.pbobjc.h"
#import "ExchangePrimaryMsg.pbobjc.h"
#import "UtilBasicIdentity.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(serviceexchangeApplyLiveInfo);
GPBObjCClassDeclaration(serviceexchangeAudienceAnchorRelation);
GPBObjCClassDeclaration(serviceexchangeChatUser);
GPBObjCClassDeclaration(serviceexchangeInitLiveTag);
GPBObjCClassDeclaration(serviceexchangeLiveGift);
GPBObjCClassDeclaration(serviceexchangeLiveRewardRank);
GPBObjCClassDeclaration(serviceexchangeLiveRoom);
GPBObjCClassDeclaration(serviceexchangeLiveTag);
GPBObjCClassDeclaration(utilidentitysdkIdEncode);

#pragma mark - serviceexchangeExchangePrimaryApiLiveRoot

@implementation serviceexchangeExchangePrimaryApiLiveRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor

static GPBFileDescriptor *serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"exchange"
                                                 objcPrefix:@"serviceexchange"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum serviceexchangeApplyLiveStatus

GPBEnumDescriptor *serviceexchangeApplyLiveStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ApplyLiveStatusUnspecified\000ApplyLiveStat"
        "usPass\000ApplyLiveStatusWaiting\000ApplyLiveS"
        "tatusUnPass\000";
    static const int32_t values[] = {
        serviceexchangeApplyLiveStatus_ApplyLiveStatusUnspecified,
        serviceexchangeApplyLiveStatus_ApplyLiveStatusPass,
        serviceexchangeApplyLiveStatus_ApplyLiveStatusWaiting,
        serviceexchangeApplyLiveStatus_ApplyLiveStatusUnPass,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(serviceexchangeApplyLiveStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:serviceexchangeApplyLiveStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      
    }
  }
  return descriptor;
}

BOOL serviceexchangeApplyLiveStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case serviceexchangeApplyLiveStatus_ApplyLiveStatusUnspecified:
    case serviceexchangeApplyLiveStatus_ApplyLiveStatusPass:
    case serviceexchangeApplyLiveStatus_ApplyLiveStatusWaiting:
    case serviceexchangeApplyLiveStatus_ApplyLiveStatusUnPass:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum serviceexchangeLiveStatus

GPBEnumDescriptor *serviceexchangeLiveStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LiveStatusUnspecified\000LiveStatusInit\000Liv"
        "eStatusLiving\000LiveStatusEnd\000";
    static const int32_t values[] = {
        serviceexchangeLiveStatus_LiveStatusUnspecified,
        serviceexchangeLiveStatus_LiveStatusInit,
        serviceexchangeLiveStatus_LiveStatusLiving,
        serviceexchangeLiveStatus_LiveStatusEnd,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(serviceexchangeLiveStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:serviceexchangeLiveStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      
    }
  }
  return descriptor;
}

BOOL serviceexchangeLiveStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case serviceexchangeLiveStatus_LiveStatusUnspecified:
    case serviceexchangeLiveStatus_LiveStatusInit:
    case serviceexchangeLiveStatus_LiveStatusLiving:
    case serviceexchangeLiveStatus_LiveStatusEnd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum serviceexchangeRankType

GPBEnumDescriptor *serviceexchangeRankType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RankTypeDay\000RankTypeWeek\000RankTypeAll\000";
    static const int32_t values[] = {
        serviceexchangeRankType_RankTypeDay,
        serviceexchangeRankType_RankTypeWeek,
        serviceexchangeRankType_RankTypeAll,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(serviceexchangeRankType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:serviceexchangeRankType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      
    }
  }
  return descriptor;
}

BOOL serviceexchangeRankType_IsValidValue(int32_t value__) {
  switch (value__) {
    case serviceexchangeRankType_RankTypeDay:
    case serviceexchangeRankType_RankTypeWeek:
    case serviceexchangeRankType_RankTypeAll:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum serviceexchangeFollowStatus

GPBEnumDescriptor *serviceexchangeFollowStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FollowStatusUnspecified\000FollowStatusFoll"
        "owed\000FollowStatusUnFollow\000";
    static const int32_t values[] = {
        serviceexchangeFollowStatus_FollowStatusUnspecified,
        serviceexchangeFollowStatus_FollowStatusFollowed,
        serviceexchangeFollowStatus_FollowStatusUnFollow,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(serviceexchangeFollowStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:serviceexchangeFollowStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      
    }
  }
  return descriptor;
}

BOOL serviceexchangeFollowStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case serviceexchangeFollowStatus_FollowStatusUnspecified:
    case serviceexchangeFollowStatus_FollowStatusFollowed:
    case serviceexchangeFollowStatus_FollowStatusUnFollow:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - serviceexchangeListLiveRewardRankRequest

@implementation serviceexchangeListLiveRewardRankRequest

@dynamic hasAnchorId, anchorId;
@dynamic rankType;

typedef struct serviceexchangeListLiveRewardRankRequest__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeRankType rankType;
  utilidentitysdkIdEncode *anchorId;
} serviceexchangeListLiveRewardRankRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "anchorId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeListLiveRewardRankRequest_FieldNumber_AnchorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeListLiveRewardRankRequest__storage_, anchorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rankType",
        .dataTypeSpecific.enumDescFunc = serviceexchangeRankType_EnumDescriptor,
        .number = serviceexchangeListLiveRewardRankRequest_FieldNumber_RankType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeListLiveRewardRankRequest__storage_, rankType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeListLiveRewardRankRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeListLiveRewardRankRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t serviceexchangeListLiveRewardRankRequest_RankType_RawValue(serviceexchangeListLiveRewardRankRequest *message) {
  GPBDescriptor *descriptor = [serviceexchangeListLiveRewardRankRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceexchangeListLiveRewardRankRequest_FieldNumber_RankType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetserviceexchangeListLiveRewardRankRequest_RankType_RawValue(serviceexchangeListLiveRewardRankRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [serviceexchangeListLiveRewardRankRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceexchangeListLiveRewardRankRequest_FieldNumber_RankType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - serviceexchangeListLiveRewardRankResponse

@implementation serviceexchangeListLiveRewardRankResponse

@dynamic liveRewardRanksArray, liveRewardRanksArray_Count;

typedef struct serviceexchangeListLiveRewardRankResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *liveRewardRanksArray;
} serviceexchangeListLiveRewardRankResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveRewardRanksArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeLiveRewardRank),
        .number = serviceexchangeListLiveRewardRankResponse_FieldNumber_LiveRewardRanksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeListLiveRewardRankResponse__storage_, liveRewardRanksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeListLiveRewardRankResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeListLiveRewardRankResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeLiveRewardRank

@implementation serviceexchangeLiveRewardRank

@dynamic hasChatUser, chatUser;
@dynamic audienceLevel;
@dynamic rewardAmount;

typedef struct serviceexchangeLiveRewardRank__storage_ {
  uint32_t _has_storage_[1];
  uint32_t audienceLevel;
  serviceexchangeChatUser *chatUser;
  uint64_t rewardAmount;
} serviceexchangeLiveRewardRank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatUser",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeChatUser),
        .number = serviceexchangeLiveRewardRank_FieldNumber_ChatUser,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeLiveRewardRank__storage_, chatUser),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audienceLevel",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveRewardRank_FieldNumber_AudienceLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeLiveRewardRank__storage_, audienceLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rewardAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveRewardRank_FieldNumber_RewardAmount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeLiveRewardRank__storage_, rewardAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeLiveRewardRank class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeLiveRewardRank__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeGetLiveAnchorInfoRequest

@implementation serviceexchangeGetLiveAnchorInfoRequest

@dynamic hasAnchorId, anchorId;

typedef struct serviceexchangeGetLiveAnchorInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *anchorId;
} serviceexchangeGetLiveAnchorInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "anchorId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeGetLiveAnchorInfoRequest_FieldNumber_AnchorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeGetLiveAnchorInfoRequest__storage_, anchorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeGetLiveAnchorInfoRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeGetLiveAnchorInfoRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeGetLiveAudienceInfoRequest

@implementation serviceexchangeGetLiveAudienceInfoRequest

@dynamic hasAnchorId, anchorId;
@dynamic hasAudienceUid, audienceUid;

typedef struct serviceexchangeGetLiveAudienceInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *anchorId;
  utilidentitysdkIdEncode *audienceUid;
} serviceexchangeGetLiveAudienceInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "anchorId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeGetLiveAudienceInfoRequest_FieldNumber_AnchorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeGetLiveAudienceInfoRequest__storage_, anchorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audienceUid",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeGetLiveAudienceInfoRequest_FieldNumber_AudienceUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeGetLiveAudienceInfoRequest__storage_, audienceUid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeGetLiveAudienceInfoRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeGetLiveAudienceInfoRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeGetLiveUserInfoResponse

@implementation serviceexchangeGetLiveUserInfoResponse

@dynamic hasChatUser, chatUser;
@dynamic liveLevel;
@dynamic fansCount;
@dynamic followStatus;

typedef struct serviceexchangeGetLiveUserInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t liveLevel;
  uint32_t fansCount;
  serviceexchangeFollowStatus followStatus;
  serviceexchangeChatUser *chatUser;
} serviceexchangeGetLiveUserInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatUser",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeChatUser),
        .number = serviceexchangeGetLiveUserInfoResponse_FieldNumber_ChatUser,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeGetLiveUserInfoResponse__storage_, chatUser),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveLevel",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeGetLiveUserInfoResponse_FieldNumber_LiveLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeGetLiveUserInfoResponse__storage_, liveLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fansCount",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeGetLiveUserInfoResponse_FieldNumber_FansCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeGetLiveUserInfoResponse__storage_, fansCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "followStatus",
        .dataTypeSpecific.enumDescFunc = serviceexchangeFollowStatus_EnumDescriptor,
        .number = serviceexchangeGetLiveUserInfoResponse_FieldNumber_FollowStatus,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceexchangeGetLiveUserInfoResponse__storage_, followStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeGetLiveUserInfoResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeGetLiveUserInfoResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t serviceexchangeGetLiveUserInfoResponse_FollowStatus_RawValue(serviceexchangeGetLiveUserInfoResponse *message) {
  GPBDescriptor *descriptor = [serviceexchangeGetLiveUserInfoResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceexchangeGetLiveUserInfoResponse_FieldNumber_FollowStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetserviceexchangeGetLiveUserInfoResponse_FollowStatus_RawValue(serviceexchangeGetLiveUserInfoResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [serviceexchangeGetLiveUserInfoResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceexchangeGetLiveUserInfoResponse_FieldNumber_FollowStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - serviceexchangeFollowRequest

@implementation serviceexchangeFollowRequest

@dynamic hasAnchorId, anchorId;
@dynamic hasLiveId, liveId;

typedef struct serviceexchangeFollowRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *anchorId;
  utilidentitysdkIdEncode *liveId;
} serviceexchangeFollowRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "anchorId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeFollowRequest_FieldNumber_AnchorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeFollowRequest__storage_, anchorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeFollowRequest_FieldNumber_LiveId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeFollowRequest__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeFollowRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeFollowRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeUnfollowRequest

@implementation serviceexchangeUnfollowRequest

@dynamic hasAnchorId, anchorId;

typedef struct serviceexchangeUnfollowRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *anchorId;
} serviceexchangeUnfollowRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "anchorId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeUnfollowRequest_FieldNumber_AnchorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeUnfollowRequest__storage_, anchorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeUnfollowRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeUnfollowRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeLiveMessageApi

@implementation serviceexchangeLiveMessageApi


typedef struct serviceexchangeLiveMessageApi__storage_ {
  uint32_t _has_storage_[1];
} serviceexchangeLiveMessageApi__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeLiveMessageApi class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(serviceexchangeLiveMessageApi__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeApplyLiveRequest

@implementation serviceexchangeApplyLiveRequest

@dynamic realName;
@dynamic idCard;
@dynamic description_p;

typedef struct serviceexchangeApplyLiveRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *realName;
  NSString *idCard;
  NSString *description_p;
} serviceexchangeApplyLiveRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "realName",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeApplyLiveRequest_FieldNumber_RealName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeApplyLiveRequest__storage_, realName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idCard",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeApplyLiveRequest_FieldNumber_IdCard,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeApplyLiveRequest__storage_, idCard),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeApplyLiveRequest_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeApplyLiveRequest__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeApplyLiveRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeApplyLiveRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeApplyLiveInfo

@implementation serviceexchangeApplyLiveInfo

@dynamic realName;
@dynamic idCard;
@dynamic desc;
@dynamic unPassReason;

typedef struct serviceexchangeApplyLiveInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *realName;
  NSString *idCard;
  NSString *desc;
  NSString *unPassReason;
} serviceexchangeApplyLiveInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "realName",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeApplyLiveInfo_FieldNumber_RealName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeApplyLiveInfo__storage_, realName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "idCard",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeApplyLiveInfo_FieldNumber_IdCard,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeApplyLiveInfo__storage_, idCard),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeApplyLiveInfo_FieldNumber_Desc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeApplyLiveInfo__storage_, desc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unPassReason",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeApplyLiveInfo_FieldNumber_UnPassReason,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceexchangeApplyLiveInfo__storage_, unPassReason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeApplyLiveInfo class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeApplyLiveInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeAnchorPersonalCenterResponse

@implementation serviceexchangeAnchorPersonalCenterResponse

@dynamic applyLiveStatus;
@dynamic hasApplyLiveInfo, applyLiveInfo;
@dynamic anchorLevel;
@dynamic fansCount;

typedef struct serviceexchangeAnchorPersonalCenterResponse__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeApplyLiveStatus applyLiveStatus;
  uint32_t anchorLevel;
  uint32_t fansCount;
  serviceexchangeApplyLiveInfo *applyLiveInfo;
} serviceexchangeAnchorPersonalCenterResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "applyLiveStatus",
        .dataTypeSpecific.enumDescFunc = serviceexchangeApplyLiveStatus_EnumDescriptor,
        .number = serviceexchangeAnchorPersonalCenterResponse_FieldNumber_ApplyLiveStatus,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeAnchorPersonalCenterResponse__storage_, applyLiveStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "applyLiveInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeApplyLiveInfo),
        .number = serviceexchangeAnchorPersonalCenterResponse_FieldNumber_ApplyLiveInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeAnchorPersonalCenterResponse__storage_, applyLiveInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "anchorLevel",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeAnchorPersonalCenterResponse_FieldNumber_AnchorLevel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeAnchorPersonalCenterResponse__storage_, anchorLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fansCount",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeAnchorPersonalCenterResponse_FieldNumber_FansCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceexchangeAnchorPersonalCenterResponse__storage_, fansCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeAnchorPersonalCenterResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeAnchorPersonalCenterResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t serviceexchangeAnchorPersonalCenterResponse_ApplyLiveStatus_RawValue(serviceexchangeAnchorPersonalCenterResponse *message) {
  GPBDescriptor *descriptor = [serviceexchangeAnchorPersonalCenterResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceexchangeAnchorPersonalCenterResponse_FieldNumber_ApplyLiveStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetserviceexchangeAnchorPersonalCenterResponse_ApplyLiveStatus_RawValue(serviceexchangeAnchorPersonalCenterResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [serviceexchangeAnchorPersonalCenterResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceexchangeAnchorPersonalCenterResponse_FieldNumber_ApplyLiveStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - serviceexchangeListLiveRequest

@implementation serviceexchangeListLiveRequest

@dynamic offset;

typedef struct serviceexchangeListLiveRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t offset;
} serviceexchangeListLiveRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeListLiveRequest_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeListLiveRequest__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeListLiveRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeListLiveRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeListLiveResponse

@implementation serviceexchangeListLiveResponse

@dynamic liveRoomsArray, liveRoomsArray_Count;

typedef struct serviceexchangeListLiveResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *liveRoomsArray;
} serviceexchangeListLiveResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveRoomsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeLiveRoom),
        .number = serviceexchangeListLiveResponse_FieldNumber_LiveRoomsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeListLiveResponse__storage_, liveRoomsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeListLiveResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeListLiveResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeListLiveByTagRequest

@implementation serviceexchangeListLiveByTagRequest

@dynamic hasLiveTagId, liveTagId;
@dynamic offset;

typedef struct serviceexchangeListLiveByTagRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t offset;
  utilidentitysdkIdEncode *liveTagId;
} serviceexchangeListLiveByTagRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveTagId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeListLiveByTagRequest_FieldNumber_LiveTagId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeListLiveByTagRequest__storage_, liveTagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeListLiveByTagRequest_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeListLiveByTagRequest__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeListLiveByTagRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeListLiveByTagRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeListLiveByTagResponse

@implementation serviceexchangeListLiveByTagResponse

@dynamic liveRoomsArray, liveRoomsArray_Count;

typedef struct serviceexchangeListLiveByTagResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *liveRoomsArray;
} serviceexchangeListLiveByTagResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveRoomsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeLiveRoom),
        .number = serviceexchangeListLiveByTagResponse_FieldNumber_LiveRoomsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeListLiveByTagResponse__storage_, liveRoomsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeListLiveByTagResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeListLiveByTagResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeOpenLiveRequest

@implementation serviceexchangeOpenLiveRequest

@dynamic liveTitle;
@dynamic liveTagIdsArray, liveTagIdsArray_Count;

typedef struct serviceexchangeOpenLiveRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *liveTitle;
  NSMutableArray *liveTagIdsArray;
} serviceexchangeOpenLiveRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveTitle",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeOpenLiveRequest_FieldNumber_LiveTitle,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeOpenLiveRequest__storage_, liveTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "liveTagIdsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeOpenLiveRequest_FieldNumber_LiveTagIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeOpenLiveRequest__storage_, liveTagIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeOpenLiveRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeOpenLiveRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeLivePushStreamSuccessRequest

@implementation serviceexchangeLivePushStreamSuccessRequest

@dynamic hasLiveId, liveId;

typedef struct serviceexchangeLivePushStreamSuccessRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *liveId;
} serviceexchangeLivePushStreamSuccessRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeLivePushStreamSuccessRequest_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeLivePushStreamSuccessRequest__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeLivePushStreamSuccessRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeLivePushStreamSuccessRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeOpenLiveResponse

@implementation serviceexchangeOpenLiveResponse

@dynamic pushStreamURL;
@dynamic hasLiveId, liveId;
@dynamic hasAnchorId, anchorId;
@dynamic hasChatUser, chatUser;
@dynamic unCloseLive;
@dynamic unCloseLiveHot;

typedef struct serviceexchangeOpenLiveResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t unCloseLiveHot;
  NSString *pushStreamURL;
  utilidentitysdkIdEncode *liveId;
  utilidentitysdkIdEncode *anchorId;
  serviceexchangeChatUser *chatUser;
} serviceexchangeOpenLiveResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pushStreamURL",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeOpenLiveResponse_FieldNumber_PushStreamURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeOpenLiveResponse__storage_, pushStreamURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeOpenLiveResponse_FieldNumber_LiveId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeOpenLiveResponse__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "anchorId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeOpenLiveResponse_FieldNumber_AnchorId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeOpenLiveResponse__storage_, anchorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatUser",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeChatUser),
        .number = serviceexchangeOpenLiveResponse_FieldNumber_ChatUser,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceexchangeOpenLiveResponse__storage_, chatUser),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unCloseLive",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeOpenLiveResponse_FieldNumber_UnCloseLive,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "unCloseLiveHot",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeOpenLiveResponse_FieldNumber_UnCloseLiveHot,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(serviceexchangeOpenLiveResponse__storage_, unCloseLiveHot),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeOpenLiveResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeOpenLiveResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\004\246\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeEnterLiveRoomRequest

@implementation serviceexchangeEnterLiveRoomRequest

@dynamic hasLiveId, liveId;

typedef struct serviceexchangeEnterLiveRoomRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *liveId;
} serviceexchangeEnterLiveRoomRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeEnterLiveRoomRequest_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeEnterLiveRoomRequest__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeEnterLiveRoomRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeEnterLiveRoomRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeExitLiveRoomRequest

@implementation serviceexchangeExitLiveRoomRequest

@dynamic hasLiveId, liveId;
@dynamic isNeedPushUserList;

typedef struct serviceexchangeExitLiveRoomRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *liveId;
} serviceexchangeExitLiveRoomRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeExitLiveRoomRequest_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeExitLiveRoomRequest__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isNeedPushUserList",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeExitLiveRoomRequest_FieldNumber_IsNeedPushUserList,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeExitLiveRoomRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeExitLiveRoomRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeLiveUserListRequest

@implementation serviceexchangeLiveUserListRequest

@dynamic hasLiveId, liveId;
@dynamic limit;

typedef struct serviceexchangeLiveUserListRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t limit;
  utilidentitysdkIdEncode *liveId;
} serviceexchangeLiveUserListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeLiveUserListRequest_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeLiveUserListRequest__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "limit",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveUserListRequest_FieldNumber_Limit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeLiveUserListRequest__storage_, limit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeLiveUserListRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeLiveUserListRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeEnterLiveRoomResponse

@implementation serviceexchangeEnterLiveRoomResponse

@dynamic livingRoomStatus;
@dynamic hasLiveRoom, liveRoom;
@dynamic hasAudienceAnchorRelation, audienceAnchorRelation;

typedef struct serviceexchangeEnterLiveRoomResponse__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeLiveRoom *liveRoom;
  serviceexchangeAudienceAnchorRelation *audienceAnchorRelation;
} serviceexchangeEnterLiveRoomResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "livingRoomStatus",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeEnterLiveRoomResponse_FieldNumber_LivingRoomStatus,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "liveRoom",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeLiveRoom),
        .number = serviceexchangeEnterLiveRoomResponse_FieldNumber_LiveRoom,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeEnterLiveRoomResponse__storage_, liveRoom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audienceAnchorRelation",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeAudienceAnchorRelation),
        .number = serviceexchangeEnterLiveRoomResponse_FieldNumber_AudienceAnchorRelation,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceexchangeEnterLiveRoomResponse__storage_, audienceAnchorRelation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeEnterLiveRoomResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeEnterLiveRoomResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeStarLiveRequest

@implementation serviceexchangeStarLiveRequest

@dynamic hasLiveId, liveId;

typedef struct serviceexchangeStarLiveRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *liveId;
} serviceexchangeStarLiveRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeStarLiveRequest_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeStarLiveRequest__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeStarLiveRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeStarLiveRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeCloseLiveRequest

@implementation serviceexchangeCloseLiveRequest

@dynamic hasLiveId, liveId;

typedef struct serviceexchangeCloseLiveRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *liveId;
} serviceexchangeCloseLiveRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeCloseLiveRequest_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeCloseLiveRequest__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeCloseLiveRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeCloseLiveRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeCloseLiveResponse

@implementation serviceexchangeCloseLiveResponse

@dynamic hasLiveId, liveId;
@dynamic increaseFanCount;
@dynamic viewCount;
@dynamic liveCombined;
@dynamic liveTime;

typedef struct serviceexchangeCloseLiveResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t increaseFanCount;
  uint32_t viewCount;
  utilidentitysdkIdEncode *liveId;
  uint64_t liveCombined;
  uint64_t liveTime;
} serviceexchangeCloseLiveResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeCloseLiveResponse_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeCloseLiveResponse__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "increaseFanCount",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeCloseLiveResponse_FieldNumber_IncreaseFanCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeCloseLiveResponse__storage_, increaseFanCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "viewCount",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeCloseLiveResponse_FieldNumber_ViewCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeCloseLiveResponse__storage_, viewCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "liveCombined",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeCloseLiveResponse_FieldNumber_LiveCombined,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceexchangeCloseLiveResponse__storage_, liveCombined),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "liveTime",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeCloseLiveResponse_FieldNumber_LiveTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(serviceexchangeCloseLiveResponse__storage_, liveTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeCloseLiveResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeCloseLiveResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeLiveChatRequest

@implementation serviceexchangeLiveChatRequest

@dynamic hasLiveId, liveId;
@dynamic content;

typedef struct serviceexchangeLiveChatRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *liveId;
  NSString *content;
} serviceexchangeLiveChatRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeLiveChatRequest_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeLiveChatRequest__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveChatRequest_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeLiveChatRequest__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeLiveChatRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeLiveChatRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeAudienceAnchorRelation

@implementation serviceexchangeAudienceAnchorRelation

@dynamic isFollow;

typedef struct serviceexchangeAudienceAnchorRelation__storage_ {
  uint32_t _has_storage_[1];
} serviceexchangeAudienceAnchorRelation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isFollow",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeAudienceAnchorRelation_FieldNumber_IsFollow,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeAudienceAnchorRelation class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeAudienceAnchorRelation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeRewardAnchorLiveRequest

@implementation serviceexchangeRewardAnchorLiveRequest

@dynamic hasLiveId, liveId;
@dynamic hasGiftId, giftId;
@dynamic giftCount;

typedef struct serviceexchangeRewardAnchorLiveRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftCount;
  utilidentitysdkIdEncode *liveId;
  utilidentitysdkIdEncode *giftId;
} serviceexchangeRewardAnchorLiveRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeRewardAnchorLiveRequest_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeRewardAnchorLiveRequest__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeRewardAnchorLiveRequest_FieldNumber_GiftId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeRewardAnchorLiveRequest__storage_, giftId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftCount",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeRewardAnchorLiveRequest_FieldNumber_GiftCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeRewardAnchorLiveRequest__storage_, giftCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeRewardAnchorLiveRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeRewardAnchorLiveRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeLiveRoom

@implementation serviceexchangeLiveRoom

@dynamic hasLiveId, liveId;
@dynamic hasAnchorId, anchorId;
@dynamic liveRoomNumber;
@dynamic liveTitle;
@dynamic liveTagsArray, liveTagsArray_Count;
@dynamic hasLiveUserInfo, liveUserInfo;
@dynamic liveHot;
@dynamic liveStar;
@dynamic livePlayStreamURL;

typedef struct serviceexchangeLiveRoom__storage_ {
  uint32_t _has_storage_[1];
  uint32_t liveHot;
  uint32_t liveStar;
  utilidentitysdkIdEncode *liveId;
  utilidentitysdkIdEncode *anchorId;
  NSString *liveRoomNumber;
  NSString *liveTitle;
  NSMutableArray *liveTagsArray;
  serviceexchangeChatUser *liveUserInfo;
  NSString *livePlayStreamURL;
} serviceexchangeLiveRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeLiveRoom_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeLiveRoom__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "anchorId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeLiveRoom_FieldNumber_AnchorId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeLiveRoom__storage_, anchorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveRoomNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveRoom_FieldNumber_LiveRoomNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeLiveRoom__storage_, liveRoomNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "liveTitle",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveRoom_FieldNumber_LiveTitle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceexchangeLiveRoom__storage_, liveTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "liveTagsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeLiveTag),
        .number = serviceexchangeLiveRoom_FieldNumber_LiveTagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeLiveRoom__storage_, liveTagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveUserInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeChatUser),
        .number = serviceexchangeLiveRoom_FieldNumber_LiveUserInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(serviceexchangeLiveRoom__storage_, liveUserInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveHot",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveRoom_FieldNumber_LiveHot,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(serviceexchangeLiveRoom__storage_, liveHot),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "liveStar",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveRoom_FieldNumber_LiveStar,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(serviceexchangeLiveRoom__storage_, liveStar),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "livePlayStreamURL",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveRoom_FieldNumber_LivePlayStreamURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(serviceexchangeLiveRoom__storage_, livePlayStreamURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeLiveRoom class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeLiveRoom__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\t\004\244\246\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeLiveTag

@implementation serviceexchangeLiveTag

@dynamic hasId_p, id_p;
@dynamic liveTagName;

typedef struct serviceexchangeLiveTag__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *id_p;
  NSString *liveTagName;
} serviceexchangeLiveTag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeLiveTag_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeLiveTag__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveTagName",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveTag_FieldNumber_LiveTagName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeLiveTag__storage_, liveTagName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeLiveTag class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeLiveTag__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeAnchorLeaveLiveRequest

@implementation serviceexchangeAnchorLeaveLiveRequest

@dynamic hasLiveId, liveId;

typedef struct serviceexchangeAnchorLeaveLiveRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *liveId;
} serviceexchangeAnchorLeaveLiveRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeAnchorLeaveLiveRequest_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeAnchorLeaveLiveRequest__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeAnchorLeaveLiveRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeAnchorLeaveLiveRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeAnchorBackLiveRequest

@implementation serviceexchangeAnchorBackLiveRequest

@dynamic hasLiveId, liveId;

typedef struct serviceexchangeAnchorBackLiveRequest__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *liveId;
} serviceexchangeAnchorBackLiveRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeAnchorBackLiveRequest_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeAnchorBackLiveRequest__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeAnchorBackLiveRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeAnchorBackLiveRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeGetLiveBaseDataResponse

@implementation serviceexchangeGetLiveBaseDataResponse

@dynamic liveTagsArray, liveTagsArray_Count;
@dynamic liveGiftsArray, liveGiftsArray_Count;

typedef struct serviceexchangeGetLiveBaseDataResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *liveTagsArray;
  NSMutableArray *liveGiftsArray;
} serviceexchangeGetLiveBaseDataResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveTagsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeInitLiveTag),
        .number = serviceexchangeGetLiveBaseDataResponse_FieldNumber_LiveTagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeGetLiveBaseDataResponse__storage_, liveTagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveGiftsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeLiveGift),
        .number = serviceexchangeGetLiveBaseDataResponse_FieldNumber_LiveGiftsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeGetLiveBaseDataResponse__storage_, liveGiftsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeGetLiveBaseDataResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeGetLiveBaseDataResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeInitLiveTag

@implementation serviceexchangeInitLiveTag

@dynamic hasId_p, id_p;
@dynamic liveTagName;
@dynamic isMain;

typedef struct serviceexchangeInitLiveTag__storage_ {
  uint32_t _has_storage_[1];
  utilidentitysdkIdEncode *id_p;
  NSString *liveTagName;
} serviceexchangeInitLiveTag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeInitLiveTag_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeInitLiveTag__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveTagName",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeInitLiveTag_FieldNumber_LiveTagName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeInitLiveTag__storage_, liveTagName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isMain",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeInitLiveTag_FieldNumber_IsMain,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeInitLiveTag class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeInitLiveTag__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeLiveGift

@implementation serviceexchangeLiveGift

@dynamic hasId_p, id_p;
@dynamic giftName;
@dynamic giftAmount;
@dynamic openFullScreen;

typedef struct serviceexchangeLiveGift__storage_ {
  uint32_t _has_storage_[1];
  uint32_t giftAmount;
  utilidentitysdkIdEncode *id_p;
  NSString *giftName;
} serviceexchangeLiveGift__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeLiveGift_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeLiveGift__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftName",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveGift_FieldNumber_GiftName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeLiveGift__storage_, giftName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveGift_FieldNumber_GiftAmount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeLiveGift__storage_, giftAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "openFullScreen",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeLiveGift_FieldNumber_OpenFullScreen,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeLiveGift class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeLiveGift__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeListMyFollowLiveRequest

@implementation serviceexchangeListMyFollowLiveRequest

@dynamic offset;

typedef struct serviceexchangeListMyFollowLiveRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t offset;
} serviceexchangeListMyFollowLiveRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeListMyFollowLiveRequest_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeListMyFollowLiveRequest__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeListMyFollowLiveRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeListMyFollowLiveRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeListMyFollowLiveResponse

@implementation serviceexchangeListMyFollowLiveResponse

@dynamic liveRoomsArray, liveRoomsArray_Count;

typedef struct serviceexchangeListMyFollowLiveResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *liveRoomsArray;
} serviceexchangeListMyFollowLiveResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveRoomsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeLiveRoom),
        .number = serviceexchangeListMyFollowLiveResponse_FieldNumber_LiveRoomsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeListMyFollowLiveResponse__storage_, liveRoomsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeListMyFollowLiveResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeListMyFollowLiveResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeGetUnCloseLiveInfoResponse

@implementation serviceexchangeGetUnCloseLiveInfoResponse

@dynamic hasLiveId, liveId;
@dynamic hasAnchorId, anchorId;
@dynamic hasChatUser, chatUser;
@dynamic liveHot;
@dynamic pushStreamURL;

typedef struct serviceexchangeGetUnCloseLiveInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t liveHot;
  utilidentitysdkIdEncode *liveId;
  utilidentitysdkIdEncode *anchorId;
  serviceexchangeChatUser *chatUser;
  NSString *pushStreamURL;
} serviceexchangeGetUnCloseLiveInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "liveId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeGetUnCloseLiveInfoResponse_FieldNumber_LiveId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeGetUnCloseLiveInfoResponse__storage_, liveId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "anchorId",
        .dataTypeSpecific.clazz = GPBObjCClass(utilidentitysdkIdEncode),
        .number = serviceexchangeGetUnCloseLiveInfoResponse_FieldNumber_AnchorId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeGetUnCloseLiveInfoResponse__storage_, anchorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatUser",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeChatUser),
        .number = serviceexchangeGetUnCloseLiveInfoResponse_FieldNumber_ChatUser,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeGetUnCloseLiveInfoResponse__storage_, chatUser),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveHot",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeGetUnCloseLiveInfoResponse_FieldNumber_LiveHot,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceexchangeGetUnCloseLiveInfoResponse__storage_, liveHot),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pushStreamURL",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeGetUnCloseLiveInfoResponse_FieldNumber_PushStreamURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(serviceexchangeGetUnCloseLiveInfoResponse__storage_, pushStreamURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeGetUnCloseLiveInfoResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiLiveRoot class]
                                          file:serviceexchangeExchangePrimaryApiLiveRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeGetUnCloseLiveInfoResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\004\246\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
