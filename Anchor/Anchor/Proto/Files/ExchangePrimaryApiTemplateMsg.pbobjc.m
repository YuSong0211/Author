// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange-primary-api-template-msg.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ExchangePrimaryApiTemplateMsg.pbobjc.h"
#import "ExchangePrimaryMsg.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(serviceexchangeChatUser);
GPBObjCClassDeclaration(serviceexchangeMessageContentBody);
GPBObjCClassDeclaration(serviceexchangeSystemTemplateMsg);
GPBObjCClassDeclaration(serviceexchangeVersionId);

#pragma mark - serviceexchangeExchangePrimaryApiTemplateMsgRoot

@implementation serviceexchangeExchangePrimaryApiTemplateMsgRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - serviceexchangeExchangePrimaryApiTemplateMsgRoot_FileDescriptor

static GPBFileDescriptor *serviceexchangeExchangePrimaryApiTemplateMsgRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"exchange"
                                                 objcPrefix:@"serviceexchange"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - serviceexchangeListTemplateMsgRequest

@implementation serviceexchangeListTemplateMsgRequest

@dynamic hasLastVersionId, lastVersionId;
@dynamic templateType;
@dynamic hasClientVersionId, clientVersionId;

typedef struct serviceexchangeListTemplateMsgRequest__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeVersionId *lastVersionId;
  NSString *templateType;
  serviceexchangeVersionId *clientVersionId;
} serviceexchangeListTemplateMsgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastVersionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeListTemplateMsgRequest_FieldNumber_LastVersionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeListTemplateMsgRequest__storage_, lastVersionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "templateType",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeListTemplateMsgRequest_FieldNumber_TemplateType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceexchangeListTemplateMsgRequest__storage_, templateType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientVersionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeListTemplateMsgRequest_FieldNumber_ClientVersionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeListTemplateMsgRequest__storage_, clientVersionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeListTemplateMsgRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiTemplateMsgRoot class]
                                          file:serviceexchangeExchangePrimaryApiTemplateMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeListTemplateMsgRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeListTemplateMsgResponse

@implementation serviceexchangeListTemplateMsgResponse

@dynamic systemTemplateMsgsArray, systemTemplateMsgsArray_Count;
@dynamic hasNext;
@dynamic newMsgCount;

typedef struct serviceexchangeListTemplateMsgResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *systemTemplateMsgsArray;
  uint64_t newMsgCount;
} serviceexchangeListTemplateMsgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "systemTemplateMsgsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeSystemTemplateMsg),
        .number = serviceexchangeListTemplateMsgResponse_FieldNumber_SystemTemplateMsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeListTemplateMsgResponse__storage_, systemTemplateMsgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hasNext",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeListTemplateMsgResponse_FieldNumber_HasNext,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "newMsgCount",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceexchangeListTemplateMsgResponse_FieldNumber_NewMsgCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceexchangeListTemplateMsgResponse__storage_, newMsgCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeListTemplateMsgResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiTemplateMsgRoot class]
                                          file:serviceexchangeExchangePrimaryApiTemplateMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeListTemplateMsgResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeSystemTemplateMsg

@implementation serviceexchangeSystemTemplateMsg

@dynamic hasBody, body;
@dynamic usersArray, usersArray_Count;

typedef struct serviceexchangeSystemTemplateMsg__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeMessageContentBody *body;
  NSMutableArray *usersArray;
} serviceexchangeSystemTemplateMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "body",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeMessageContentBody),
        .number = serviceexchangeSystemTemplateMsg_FieldNumber_Body,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeSystemTemplateMsg__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeChatUser),
        .number = serviceexchangeSystemTemplateMsg_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceexchangeSystemTemplateMsg__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeSystemTemplateMsg class]
                                     rootClass:[serviceexchangeExchangePrimaryApiTemplateMsgRoot class]
                                          file:serviceexchangeExchangePrimaryApiTemplateMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeSystemTemplateMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeReadTemplateRequest

@implementation serviceexchangeReadTemplateRequest

@dynamic hasVersionId, versionId;

typedef struct serviceexchangeReadTemplateRequest__storage_ {
  uint32_t _has_storage_[1];
  serviceexchangeVersionId *versionId;
} serviceexchangeReadTemplateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "versionId",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceexchangeVersionId),
        .number = serviceexchangeReadTemplateRequest_FieldNumber_VersionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceexchangeReadTemplateRequest__storage_, versionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeReadTemplateRequest class]
                                     rootClass:[serviceexchangeExchangePrimaryApiTemplateMsgRoot class]
                                          file:serviceexchangeExchangePrimaryApiTemplateMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceexchangeReadTemplateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceexchangeReadTemplateResponse

@implementation serviceexchangeReadTemplateResponse


typedef struct serviceexchangeReadTemplateResponse__storage_ {
  uint32_t _has_storage_[1];
} serviceexchangeReadTemplateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceexchangeReadTemplateResponse class]
                                     rootClass:[serviceexchangeExchangePrimaryApiTemplateMsgRoot class]
                                          file:serviceexchangeExchangePrimaryApiTemplateMsgRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(serviceexchangeReadTemplateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
