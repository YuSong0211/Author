// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appv-primary-api-recommend.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "AppvPrimaryApiRecommend.pbobjc.h"
#import "AppvBasic.pbobjc.h"
#import "AppvPrimaryBasic.pbobjc.h"
#import "AppvPrimaryCommunity.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(appvapiBrowseOtherHomepage);
GPBObjCClassDeclaration(appvapiClickPostTag);
GPBObjCClassDeclaration(appvapiClickVideoTag);
GPBObjCClassDeclaration(appvapiCollectVideo);
GPBObjCClassDeclaration(appvapiCommunityPost);
GPBObjCClassDeclaration(appvapiIdEncode);
GPBObjCClassDeclaration(appvapiLikeVideo);
GPBObjCClassDeclaration(appvapiPlayVideo);
GPBObjCClassDeclaration(appvapiPlayVideoFulfill);
GPBObjCClassDeclaration(appvapiVisitHomepageForPost);
GPBObjCClassDeclaration(appvapiVisitHomepageForVideo);

#pragma mark - appvapiAppvPrimaryApiRecommendRoot

@implementation appvapiAppvPrimaryApiRecommendRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - appvapiAppvPrimaryApiRecommendRoot_FileDescriptor

static GPBFileDescriptor *appvapiAppvPrimaryApiRecommendRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"appvapi"
                                                 objcPrefix:@"appvapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - appvapiListRecommendCommunityPostsResponse

@implementation appvapiListRecommendCommunityPostsResponse

@dynamic communityPostArray, communityPostArray_Count;

typedef struct appvapiListRecommendCommunityPostsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *communityPostArray;
} appvapiListRecommendCommunityPostsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "communityPostArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCommunityPost),
        .number = appvapiListRecommendCommunityPostsResponse_FieldNumber_CommunityPostArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListRecommendCommunityPostsResponse__storage_, communityPostArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListRecommendCommunityPostsResponse class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListRecommendCommunityPostsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiCollectRequest

@implementation appvapiCollectRequest

@dynamic buriedPointOneOfCase;
@dynamic playVideo;
@dynamic playVideoFulfill;
@dynamic browseOtherHomepage;
@dynamic clickVideoTag;
@dynamic likeVideo;
@dynamic collectVideo;
@dynamic clickPostTag;
@dynamic visitHomepageForPost;
@dynamic visitHomepageForVideo;

typedef struct appvapiCollectRequest__storage_ {
  uint32_t _has_storage_[2];
  appvapiPlayVideo *playVideo;
  appvapiPlayVideoFulfill *playVideoFulfill;
  appvapiBrowseOtherHomepage *browseOtherHomepage;
  appvapiClickVideoTag *clickVideoTag;
  appvapiLikeVideo *likeVideo;
  appvapiCollectVideo *collectVideo;
  appvapiClickPostTag *clickPostTag;
  appvapiVisitHomepageForPost *visitHomepageForPost;
  appvapiVisitHomepageForVideo *visitHomepageForVideo;
} appvapiCollectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playVideo",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiPlayVideo),
        .number = appvapiCollectRequest_FieldNumber_PlayVideo,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(appvapiCollectRequest__storage_, playVideo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "playVideoFulfill",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiPlayVideoFulfill),
        .number = appvapiCollectRequest_FieldNumber_PlayVideoFulfill,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(appvapiCollectRequest__storage_, playVideoFulfill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "browseOtherHomepage",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiBrowseOtherHomepage),
        .number = appvapiCollectRequest_FieldNumber_BrowseOtherHomepage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(appvapiCollectRequest__storage_, browseOtherHomepage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clickVideoTag",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiClickVideoTag),
        .number = appvapiCollectRequest_FieldNumber_ClickVideoTag,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(appvapiCollectRequest__storage_, clickVideoTag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "likeVideo",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiLikeVideo),
        .number = appvapiCollectRequest_FieldNumber_LikeVideo,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(appvapiCollectRequest__storage_, likeVideo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "collectVideo",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCollectVideo),
        .number = appvapiCollectRequest_FieldNumber_CollectVideo,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(appvapiCollectRequest__storage_, collectVideo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clickPostTag",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiClickPostTag),
        .number = appvapiCollectRequest_FieldNumber_ClickPostTag,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(appvapiCollectRequest__storage_, clickPostTag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "visitHomepageForPost",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiVisitHomepageForPost),
        .number = appvapiCollectRequest_FieldNumber_VisitHomepageForPost,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(appvapiCollectRequest__storage_, visitHomepageForPost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "visitHomepageForVideo",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiVisitHomepageForVideo),
        .number = appvapiCollectRequest_FieldNumber_VisitHomepageForVideo,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(appvapiCollectRequest__storage_, visitHomepageForVideo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiCollectRequest class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiCollectRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "buriedPoint",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void appvapiCollectRequest_ClearBuriedPointOneOfCase(appvapiCollectRequest *message) {
  GPBDescriptor *descriptor = [appvapiCollectRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - appvapiPlayVideo

@implementation appvapiPlayVideo

@dynamic hasVideoId, videoId;

typedef struct appvapiPlayVideo__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *videoId;
} appvapiPlayVideo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "videoId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiPlayVideo_FieldNumber_VideoId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiPlayVideo__storage_, videoId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiPlayVideo class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiPlayVideo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiPlayVideoThreeSeconds

@implementation appvapiPlayVideoThreeSeconds

@dynamic hasVideoId, videoId;

typedef struct appvapiPlayVideoThreeSeconds__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *videoId;
} appvapiPlayVideoThreeSeconds__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "videoId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiPlayVideoThreeSeconds_FieldNumber_VideoId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiPlayVideoThreeSeconds__storage_, videoId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiPlayVideoThreeSeconds class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiPlayVideoThreeSeconds__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiPlayVideoFulfill

@implementation appvapiPlayVideoFulfill

@dynamic hasVideoId, videoId;

typedef struct appvapiPlayVideoFulfill__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *videoId;
} appvapiPlayVideoFulfill__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "videoId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiPlayVideoFulfill_FieldNumber_VideoId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiPlayVideoFulfill__storage_, videoId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiPlayVideoFulfill class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiPlayVideoFulfill__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiBrowseOtherHomepage

@implementation appvapiBrowseOtherHomepage

@dynamic hasOtherUid, otherUid;

typedef struct appvapiBrowseOtherHomepage__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *otherUid;
} appvapiBrowseOtherHomepage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "otherUid",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiBrowseOtherHomepage_FieldNumber_OtherUid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiBrowseOtherHomepage__storage_, otherUid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiBrowseOtherHomepage class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiBrowseOtherHomepage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiVisitHomepageForVideo

@implementation appvapiVisitHomepageForVideo

@dynamic hasUid, uid;
@dynamic hasVideoId, videoId;
@dynamic hasTagId, tagId;

typedef struct appvapiVisitHomepageForVideo__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *uid;
  appvapiIdEncode *videoId;
  appvapiIdEncode *tagId;
} appvapiVisitHomepageForVideo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiVisitHomepageForVideo_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiVisitHomepageForVideo__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "videoId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiVisitHomepageForVideo_FieldNumber_VideoId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiVisitHomepageForVideo__storage_, videoId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiVisitHomepageForVideo_FieldNumber_TagId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiVisitHomepageForVideo__storage_, tagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiVisitHomepageForVideo class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiVisitHomepageForVideo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiVisitHomepageForPost

@implementation appvapiVisitHomepageForPost

@dynamic hasUid, uid;
@dynamic hasPostId, postId;
@dynamic hasTagId, tagId;

typedef struct appvapiVisitHomepageForPost__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *uid;
  appvapiIdEncode *postId;
  appvapiIdEncode *tagId;
} appvapiVisitHomepageForPost__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiVisitHomepageForPost_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiVisitHomepageForPost__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "postId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiVisitHomepageForPost_FieldNumber_PostId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiVisitHomepageForPost__storage_, postId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiVisitHomepageForPost_FieldNumber_TagId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiVisitHomepageForPost__storage_, tagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiVisitHomepageForPost class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiVisitHomepageForPost__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiClickVideoTag

@implementation appvapiClickVideoTag

@dynamic hasVideoId, videoId;
@dynamic hasTagId, tagId;
@dynamic tagName;

typedef struct appvapiClickVideoTag__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *videoId;
  appvapiIdEncode *tagId;
  NSString *tagName;
} appvapiClickVideoTag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "videoId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiClickVideoTag_FieldNumber_VideoId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiClickVideoTag__storage_, videoId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiClickVideoTag_FieldNumber_TagId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiClickVideoTag__storage_, tagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagName",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiClickVideoTag_FieldNumber_TagName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiClickVideoTag__storage_, tagName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiClickVideoTag class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiClickVideoTag__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiClickPostTag

@implementation appvapiClickPostTag

@dynamic hasPostId, postId;
@dynamic hasTagId, tagId;
@dynamic tagName;

typedef struct appvapiClickPostTag__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *postId;
  appvapiIdEncode *tagId;
  NSString *tagName;
} appvapiClickPostTag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "postId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiClickPostTag_FieldNumber_PostId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiClickPostTag__storage_, postId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiClickPostTag_FieldNumber_TagId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiClickPostTag__storage_, tagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagName",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiClickPostTag_FieldNumber_TagName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiClickPostTag__storage_, tagName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiClickPostTag class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiClickPostTag__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiLikeVideo

@implementation appvapiLikeVideo

@dynamic hasVideoId, videoId;

typedef struct appvapiLikeVideo__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *videoId;
} appvapiLikeVideo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "videoId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiLikeVideo_FieldNumber_VideoId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiLikeVideo__storage_, videoId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiLikeVideo class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiLikeVideo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiDownloadVideo

@implementation appvapiDownloadVideo

@dynamic hasVideoId, videoId;

typedef struct appvapiDownloadVideo__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *videoId;
} appvapiDownloadVideo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "videoId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiDownloadVideo_FieldNumber_VideoId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiDownloadVideo__storage_, videoId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiDownloadVideo class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiDownloadVideo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiCollectVideo

@implementation appvapiCollectVideo

@dynamic hasVideoId, videoId;

typedef struct appvapiCollectVideo__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *videoId;
} appvapiCollectVideo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "videoId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiCollectVideo_FieldNumber_VideoId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiCollectVideo__storage_, videoId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiCollectVideo class]
                                     rootClass:[appvapiAppvPrimaryApiRecommendRoot class]
                                          file:appvapiAppvPrimaryApiRecommendRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiCollectVideo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
