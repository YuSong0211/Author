// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imchat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Imchat.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(imIMNewMessage);
GPBObjCClassDeclaration(imMessageCountItem);

#pragma mark - imImchatRoot

@implementation imImchatRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - imImchatRoot_FileDescriptor

static GPBFileDescriptor *imImchatRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"im"
                                                 objcPrefix:@"im"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - imIMMessage

@implementation imIMMessage

@dynamic chatId;
@dynamic msgType;
@dynamic content;
@dynamic msgId;
@dynamic msgParam;

typedef struct imIMMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgType;
  NSString *chatId;
  NSString *content;
  NSString *msgId;
  NSString *msgParam;
} imIMMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMMessage_FieldNumber_ChatId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(imIMMessage__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMMessage_FieldNumber_MsgType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(imIMMessage__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMMessage_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(imIMMessage__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMMessage_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(imIMMessage__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgParam",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMMessage_FieldNumber_MsgParam,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(imIMMessage__storage_, msgParam),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[imIMMessage class]
                                     rootClass:[imImchatRoot class]
                                          file:imImchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(imIMMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\006\000\002\007\000\004\005\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - imIMNewMessage

@implementation imIMNewMessage

@dynamic uid;
@dynamic msgType;
@dynamic content;
@dynamic msgId;
@dynamic chatId;
@dynamic nickName;
@dynamic avatar;
@dynamic receiveTime;

typedef struct imIMNewMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgType;
  NSString *uid;
  NSString *content;
  NSString *msgId;
  NSString *chatId;
  NSString *nickName;
  NSString *avatar;
  int64_t receiveTime;
} imIMNewMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMNewMessage_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(imIMNewMessage__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMNewMessage_FieldNumber_MsgType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(imIMNewMessage__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMNewMessage_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(imIMNewMessage__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMNewMessage_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(imIMNewMessage__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMNewMessage_FieldNumber_ChatId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(imIMNewMessage__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMNewMessage_FieldNumber_NickName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(imIMNewMessage__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMNewMessage_FieldNumber_Avatar,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(imIMNewMessage__storage_, avatar),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receiveTime",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMNewMessage_FieldNumber_ReceiveTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(imIMNewMessage__storage_, receiveTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[imIMNewMessage class]
                                     rootClass:[imImchatRoot class]
                                          file:imImchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(imIMNewMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\007\000\004\005\000\005\006\000\006\010\000\010\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - imImInfo

@implementation imImInfo


typedef struct imImInfo__storage_ {
  uint32_t _has_storage_[1];
} imImInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[imImInfo class]
                                     rootClass:[imImchatRoot class]
                                          file:imImchatRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(imImInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - imIMMessageList

@implementation imIMMessageList

@dynamic itemListArray, itemListArray_Count;
@dynamic count;

typedef struct imIMMessageList__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  NSMutableArray *itemListArray;
} imIMMessageList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemListArray",
        .dataTypeSpecific.clazz = GPBObjCClass(imMessageCountItem),
        .number = imIMMessageList_FieldNumber_ItemListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(imIMMessageList__storage_, itemListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMMessageList_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(imIMMessageList__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[imIMMessageList class]
                                     rootClass:[imImchatRoot class]
                                          file:imImchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(imIMMessageList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000itemList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - imMessageCountItem

@implementation imMessageCountItem

@dynamic count;
@dynamic chatId;
@dynamic content;
@dynamic receiveTime;
@dynamic nickName;
@dynamic avatar;

typedef struct imMessageCountItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  NSString *chatId;
  NSString *content;
  NSString *nickName;
  NSString *avatar;
  int64_t receiveTime;
} imMessageCountItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = imMessageCountItem_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(imMessageCountItem__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = imMessageCountItem_FieldNumber_ChatId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(imMessageCountItem__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = imMessageCountItem_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(imMessageCountItem__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receiveTime",
        .dataTypeSpecific.clazz = Nil,
        .number = imMessageCountItem_FieldNumber_ReceiveTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(imMessageCountItem__storage_, receiveTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.clazz = Nil,
        .number = imMessageCountItem_FieldNumber_NickName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(imMessageCountItem__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.clazz = Nil,
        .number = imMessageCountItem_FieldNumber_Avatar,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(imMessageCountItem__storage_, avatar),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[imMessageCountItem class]
                                     rootClass:[imImchatRoot class]
                                          file:imImchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(imMessageCountItem__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\006\000\004\013\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - imImReadMessage

@implementation imImReadMessage

@dynamic chatId;
@dynamic lastId;

typedef struct imImReadMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *chatId;
  int64_t lastId;
} imImReadMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = imImReadMessage_FieldNumber_ChatId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(imImReadMessage__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastId",
        .dataTypeSpecific.clazz = Nil,
        .number = imImReadMessage_FieldNumber_LastId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(imImReadMessage__storage_, lastId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[imImReadMessage class]
                                     rootClass:[imImchatRoot class]
                                          file:imImchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(imImReadMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - imIMNewMessageList

@implementation imIMNewMessageList

@dynamic msgListArray, msgListArray_Count;

typedef struct imIMNewMessageList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgListArray;
} imIMNewMessageList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgListArray",
        .dataTypeSpecific.clazz = GPBObjCClass(imIMNewMessage),
        .number = imIMNewMessageList_FieldNumber_MsgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(imIMNewMessageList__storage_, msgListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[imIMNewMessageList class]
                                     rootClass:[imImchatRoot class]
                                          file:imImchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(imIMNewMessageList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000msgList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - imImDeleteLate

@implementation imImDeleteLate

@dynamic chatId;

typedef struct imImDeleteLate__storage_ {
  uint32_t _has_storage_[1];
  NSString *chatId;
} imImDeleteLate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = imImDeleteLate_FieldNumber_ChatId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(imImDeleteLate__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[imImDeleteLate class]
                                     rootClass:[imImchatRoot class]
                                          file:imImchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(imImDeleteLate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - imMsg_Receive_Ok

@implementation imMsg_Receive_Ok

@dynamic msgId;
@dynamic chatId;

typedef struct imMsg_Receive_Ok__storage_ {
  uint32_t _has_storage_[1];
  NSString *msgId;
  NSString *chatId;
} imMsg_Receive_Ok__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = imMsg_Receive_Ok_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(imMsg_Receive_Ok__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = imMsg_Receive_Ok_FieldNumber_ChatId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(imMsg_Receive_Ok__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[imMsg_Receive_Ok class]
                                     rootClass:[imImchatRoot class]
                                          file:imImchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(imMsg_Receive_Ok__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\005\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - imIMSendMessageSuccess

@implementation imIMSendMessageSuccess

@dynamic msgId;
@dynamic chatId;

typedef struct imIMSendMessageSuccess__storage_ {
  uint32_t _has_storage_[1];
  NSString *msgId;
  NSString *chatId;
} imIMSendMessageSuccess__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMSendMessageSuccess_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(imIMSendMessageSuccess__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatId",
        .dataTypeSpecific.clazz = Nil,
        .number = imIMSendMessageSuccess_FieldNumber_ChatId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(imIMSendMessageSuccess__storage_, chatId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[imIMSendMessageSuccess class]
                                     rootClass:[imImchatRoot class]
                                          file:imImchatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(imIMSendMessageSuccess__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\005\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
