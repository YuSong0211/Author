// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appv-primary-api-content-community.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "AppvPrimaryApiContentCommunity.pbobjc.h"
#import "AppvBasic.pbobjc.h"
#import "AppvOss.pbobjc.h"
#import "AppvPrimaryCommunity.pbobjc.h"
#import "AppvPrimaryTag.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(appvapiCommunityPost);
GPBObjCClassDeclaration(appvapiContentTag);
GPBObjCClassDeclaration(appvapiIdEncode);
GPBObjCClassDeclaration(appvapiMyCollectCommunityPosts);
GPBObjCClassDeclaration(appvapiMyStarCommunityPosts);
GPBObjCClassDeclaration(appvapiPublishingCommunityPostMedia);
GPBObjCClassDeclaration(appvapiPublishingPost);

#pragma mark - appvapiAppvPrimaryApiContentCommunityRoot

@implementation appvapiAppvPrimaryApiContentCommunityRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor

static GPBFileDescriptor *appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"appvapi"
                                                 objcPrefix:@"appvapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - appvapiPublishingCommunityPostMediaRequest

@implementation appvapiPublishingCommunityPostMediaRequest

@dynamic content;
@dynamic hasPublishingCommunityPostMedia, publishingCommunityPostMedia;
@dynamic tagsArray, tagsArray_Count;
@dynamic tagIdsArray, tagIdsArray_Count;

typedef struct appvapiPublishingCommunityPostMediaRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
  appvapiPublishingCommunityPostMedia *publishingCommunityPostMedia;
  NSMutableArray *tagsArray;
  NSMutableArray *tagIdsArray;
} appvapiPublishingCommunityPostMediaRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiPublishingCommunityPostMediaRequest_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiPublishingCommunityPostMediaRequest__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publishingCommunityPostMedia",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiPublishingCommunityPostMedia),
        .number = appvapiPublishingCommunityPostMediaRequest_FieldNumber_PublishingCommunityPostMedia,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiPublishingCommunityPostMediaRequest__storage_, publishingCommunityPostMedia),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiContentTag),
        .number = appvapiPublishingCommunityPostMediaRequest_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiPublishingCommunityPostMediaRequest__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagIdsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiPublishingCommunityPostMediaRequest_FieldNumber_TagIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiPublishingCommunityPostMediaRequest__storage_, tagIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiPublishingCommunityPostMediaRequest class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiPublishingCommunityPostMediaRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiPublishingCommunityPostContentRequest

@implementation appvapiPublishingCommunityPostContentRequest

@dynamic content;
@dynamic tagsArray, tagsArray_Count;
@dynamic tagIdsArray, tagIdsArray_Count;

typedef struct appvapiPublishingCommunityPostContentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
  NSMutableArray *tagsArray;
  NSMutableArray *tagIdsArray;
} appvapiPublishingCommunityPostContentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiPublishingCommunityPostContentRequest_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiPublishingCommunityPostContentRequest__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiContentTag),
        .number = appvapiPublishingCommunityPostContentRequest_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiPublishingCommunityPostContentRequest__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagIdsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiPublishingCommunityPostContentRequest_FieldNumber_TagIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiPublishingCommunityPostContentRequest__storage_, tagIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiPublishingCommunityPostContentRequest class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiPublishingCommunityPostContentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListCommunityPostsResponse

@implementation appvapiListCommunityPostsResponse

@dynamic communityPostsArray, communityPostsArray_Count;
@dynamic hasPublishingPost, publishingPost;

typedef struct appvapiListCommunityPostsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *communityPostsArray;
  appvapiPublishingPost *publishingPost;
} appvapiListCommunityPostsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "communityPostsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCommunityPost),
        .number = appvapiListCommunityPostsResponse_FieldNumber_CommunityPostsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListCommunityPostsResponse__storage_, communityPostsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "publishingPost",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiPublishingPost),
        .number = appvapiListCommunityPostsResponse_FieldNumber_PublishingPost,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListCommunityPostsResponse__storage_, publishingPost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListCommunityPostsResponse class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListCommunityPostsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiPublishingPost

@implementation appvapiPublishingPost

@dynamic publishingCount;

typedef struct appvapiPublishingPost__storage_ {
  uint32_t _has_storage_[1];
  uint32_t publishingCount;
} appvapiPublishingPost__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "publishingCount",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiPublishingPost_FieldNumber_PublishingCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiPublishingPost__storage_, publishingCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiPublishingPost class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiPublishingPost__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListCommunityPostsRequest

@implementation appvapiListCommunityPostsRequest

@dynamic hasLastId, lastId;

typedef struct appvapiListCommunityPostsRequest__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *lastId;
} appvapiListCommunityPostsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiListCommunityPostsRequest_FieldNumber_LastId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListCommunityPostsRequest__storage_, lastId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListCommunityPostsRequest class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListCommunityPostsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListSearchCommunityPostsRequest

@implementation appvapiListSearchCommunityPostsRequest

@dynamic content;
@dynamic current;

typedef struct appvapiListSearchCommunityPostsRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t current;
  NSString *content;
} appvapiListSearchCommunityPostsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiListSearchCommunityPostsRequest_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListSearchCommunityPostsRequest__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "current",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiListSearchCommunityPostsRequest_FieldNumber_Current,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiListSearchCommunityPostsRequest__storage_, current),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListSearchCommunityPostsRequest class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListSearchCommunityPostsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListTagCommunityPostsRequest

@implementation appvapiListTagCommunityPostsRequest

@dynamic hasTagId, tagId;
@dynamic offset;

typedef struct appvapiListTagCommunityPostsRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t offset;
  appvapiIdEncode *tagId;
} appvapiListTagCommunityPostsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tagId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiListTagCommunityPostsRequest_FieldNumber_TagId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListTagCommunityPostsRequest__storage_, tagId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiListTagCommunityPostsRequest_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiListTagCommunityPostsRequest__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListTagCommunityPostsRequest class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListTagCommunityPostsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiDeleteCommunityPostRequest

@implementation appvapiDeleteCommunityPostRequest

@dynamic postIdsArray, postIdsArray_Count;

typedef struct appvapiDeleteCommunityPostRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *postIdsArray;
} appvapiDeleteCommunityPostRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "postIdsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiDeleteCommunityPostRequest_FieldNumber_PostIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiDeleteCommunityPostRequest__storage_, postIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiDeleteCommunityPostRequest class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiDeleteCommunityPostRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiDeleteCommunityPostResponse

@implementation appvapiDeleteCommunityPostResponse

@dynamic postIdsArray, postIdsArray_Count;

typedef struct appvapiDeleteCommunityPostResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *postIdsArray;
} appvapiDeleteCommunityPostResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "postIdsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiDeleteCommunityPostResponse_FieldNumber_PostIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiDeleteCommunityPostResponse__storage_, postIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiDeleteCommunityPostResponse class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiDeleteCommunityPostResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListMyStarCommunityPostsResponse

@implementation appvapiListMyStarCommunityPostsResponse

@dynamic myStarCommunityPostsArray, myStarCommunityPostsArray_Count;

typedef struct appvapiListMyStarCommunityPostsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *myStarCommunityPostsArray;
} appvapiListMyStarCommunityPostsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "myStarCommunityPostsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiMyStarCommunityPosts),
        .number = appvapiListMyStarCommunityPostsResponse_FieldNumber_MyStarCommunityPostsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListMyStarCommunityPostsResponse__storage_, myStarCommunityPostsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListMyStarCommunityPostsResponse class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListMyStarCommunityPostsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListMyCollectCommunityPostsResponse

@implementation appvapiListMyCollectCommunityPostsResponse

@dynamic myCollectCommunityPostsArray, myCollectCommunityPostsArray_Count;

typedef struct appvapiListMyCollectCommunityPostsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *myCollectCommunityPostsArray;
} appvapiListMyCollectCommunityPostsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "myCollectCommunityPostsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiMyCollectCommunityPosts),
        .number = appvapiListMyCollectCommunityPostsResponse_FieldNumber_MyCollectCommunityPostsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiListMyCollectCommunityPostsResponse__storage_, myCollectCommunityPostsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListMyCollectCommunityPostsResponse class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListMyCollectCommunityPostsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiMyStarCommunityPosts

@implementation appvapiMyStarCommunityPosts

@dynamic hasCommunityPosts, communityPosts;
@dynamic hasLikeId, likeId;

typedef struct appvapiMyStarCommunityPosts__storage_ {
  uint32_t _has_storage_[1];
  appvapiCommunityPost *communityPosts;
  appvapiIdEncode *likeId;
} appvapiMyStarCommunityPosts__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "communityPosts",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCommunityPost),
        .number = appvapiMyStarCommunityPosts_FieldNumber_CommunityPosts,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiMyStarCommunityPosts__storage_, communityPosts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "likeId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiMyStarCommunityPosts_FieldNumber_LikeId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiMyStarCommunityPosts__storage_, likeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiMyStarCommunityPosts class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiMyStarCommunityPosts__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiMyCollectCommunityPosts

@implementation appvapiMyCollectCommunityPosts

@dynamic hasCommunityPosts, communityPosts;
@dynamic hasCollectionId, collectionId;

typedef struct appvapiMyCollectCommunityPosts__storage_ {
  uint32_t _has_storage_[1];
  appvapiCommunityPost *communityPosts;
  appvapiIdEncode *collectionId;
} appvapiMyCollectCommunityPosts__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "communityPosts",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiCommunityPost),
        .number = appvapiMyCollectCommunityPosts_FieldNumber_CommunityPosts,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiMyCollectCommunityPosts__storage_, communityPosts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "collectionId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiMyCollectCommunityPosts_FieldNumber_CollectionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiMyCollectCommunityPosts__storage_, collectionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiMyCollectCommunityPosts class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiMyCollectCommunityPosts__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiListRecommendCommunityPostsRequest

@implementation appvapiListRecommendCommunityPostsRequest

@dynamic offset;

typedef struct appvapiListRecommendCommunityPostsRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t offset;
} appvapiListRecommendCommunityPostsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiListRecommendCommunityPostsRequest_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiListRecommendCommunityPostsRequest__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiListRecommendCommunityPostsRequest class]
                                     rootClass:[appvapiAppvPrimaryApiContentCommunityRoot class]
                                          file:appvapiAppvPrimaryApiContentCommunityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiListRecommendCommunityPostsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
