// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: applink-primary-api-passport.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ApplinkPrimaryApiPassport.pbobjc.h"
#import "ApplinkVersion.pbobjc.h"
#import "ApplinkPrimaryNotice.pbobjc.h"
#import "ApplinkPrimaryAdvertisement.pbobjc.h"
#import "ApplinkPrimaryTime.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(serviceapplinkAdvertisement);
GPBObjCClassDeclaration(serviceapplinkAppVersion);
GPBObjCClassDeclaration(serviceapplinkCheckLastedResponse);
GPBObjCClassDeclaration(serviceapplinkConfig);
GPBObjCClassDeclaration(serviceapplinkDomains);
GPBObjCClassDeclaration(serviceapplinkNotice);
GPBObjCClassDeclaration(serviceapplinkServerTime);

#pragma mark - serviceapplinkApplinkPrimaryApiPassportRoot

@implementation serviceapplinkApplinkPrimaryApiPassportRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - serviceapplinkApplinkPrimaryApiPassportRoot_FileDescriptor

static GPBFileDescriptor *serviceapplinkApplinkPrimaryApiPassportRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"applink"
                                                 objcPrefix:@"serviceapplink"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - serviceapplinkCheckLastedRequest

@implementation serviceapplinkCheckLastedRequest

@dynamic version;
@dynamic clientType;
@dynamic grayscale;

typedef struct serviceapplinkCheckLastedRequest__storage_ {
  uint32_t _has_storage_[1];
  serviceapplinkClientType clientType;
  NSString *version;
} serviceapplinkCheckLastedRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkCheckLastedRequest_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceapplinkCheckLastedRequest__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientType",
        .dataTypeSpecific.enumDescFunc = serviceapplinkClientType_EnumDescriptor,
        .number = serviceapplinkCheckLastedRequest_FieldNumber_ClientType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceapplinkCheckLastedRequest__storage_, clientType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "grayscale",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkCheckLastedRequest_FieldNumber_Grayscale,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceapplinkCheckLastedRequest class]
                                     rootClass:[serviceapplinkApplinkPrimaryApiPassportRoot class]
                                          file:serviceapplinkApplinkPrimaryApiPassportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceapplinkCheckLastedRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t serviceapplinkCheckLastedRequest_ClientType_RawValue(serviceapplinkCheckLastedRequest *message) {
  GPBDescriptor *descriptor = [serviceapplinkCheckLastedRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceapplinkCheckLastedRequest_FieldNumber_ClientType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetserviceapplinkCheckLastedRequest_ClientType_RawValue(serviceapplinkCheckLastedRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [serviceapplinkCheckLastedRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceapplinkCheckLastedRequest_FieldNumber_ClientType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - serviceapplinkCheckLastedResponse

@implementation serviceapplinkCheckLastedResponse

@dynamic hasAppVersion, appVersion;
@dynamic hasEntryDomains, entryDomains;
@dynamic businessDomains, businessDomains_Count;
@dynamic dynamicDomains, dynamicDomains_Count;
@dynamic adsArray, adsArray_Count;
@dynamic feedAdsArray, feedAdsArray_Count;
@dynamic noticesArray, noticesArray_Count;
@dynamic hasTime, time;
@dynamic hasConfig, config;

typedef struct serviceapplinkCheckLastedResponse__storage_ {
  uint32_t _has_storage_[1];
  serviceapplinkAppVersion *appVersion;
  serviceapplinkDomains *entryDomains;
  NSMutableDictionary *businessDomains;
  NSMutableDictionary *dynamicDomains;
  NSMutableArray *adsArray;
  NSMutableArray *feedAdsArray;
  NSMutableArray *noticesArray;
  serviceapplinkServerTime *time;
  serviceapplinkConfig *config;
} serviceapplinkCheckLastedResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appVersion",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceapplinkAppVersion),
        .number = serviceapplinkCheckLastedResponse_FieldNumber_AppVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceapplinkCheckLastedResponse__storage_, appVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "entryDomains",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceapplinkDomains),
        .number = serviceapplinkCheckLastedResponse_FieldNumber_EntryDomains,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceapplinkCheckLastedResponse__storage_, entryDomains),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "businessDomains",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceapplinkDomains),
        .number = serviceapplinkCheckLastedResponse_FieldNumber_BusinessDomains,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceapplinkCheckLastedResponse__storage_, businessDomains),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dynamicDomains",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceapplinkDomains),
        .number = serviceapplinkCheckLastedResponse_FieldNumber_DynamicDomains,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceapplinkCheckLastedResponse__storage_, dynamicDomains),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceapplinkAdvertisement),
        .number = serviceapplinkCheckLastedResponse_FieldNumber_AdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceapplinkCheckLastedResponse__storage_, adsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "feedAdsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceapplinkAdvertisement),
        .number = serviceapplinkCheckLastedResponse_FieldNumber_FeedAdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceapplinkCheckLastedResponse__storage_, feedAdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "noticesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceapplinkNotice),
        .number = serviceapplinkCheckLastedResponse_FieldNumber_NoticesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceapplinkCheckLastedResponse__storage_, noticesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceapplinkServerTime),
        .number = serviceapplinkCheckLastedResponse_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceapplinkCheckLastedResponse__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(serviceapplinkConfig),
        .number = serviceapplinkCheckLastedResponse_FieldNumber_Config,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceapplinkCheckLastedResponse__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceapplinkCheckLastedResponse class]
                                     rootClass:[serviceapplinkApplinkPrimaryApiPassportRoot class]
                                          file:serviceapplinkApplinkPrimaryApiPassportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceapplinkCheckLastedResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\000feedAds\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceapplinkDomains

@implementation serviceapplinkDomains

@dynamic domainArray, domainArray_Count;

typedef struct serviceapplinkDomains__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *domainArray;
} serviceapplinkDomains__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "domainArray",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkDomains_FieldNumber_DomainArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(serviceapplinkDomains__storage_, domainArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceapplinkDomains class]
                                     rootClass:[serviceapplinkApplinkPrimaryApiPassportRoot class]
                                          file:serviceapplinkApplinkPrimaryApiPassportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceapplinkDomains__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceapplinkAppVersion

@implementation serviceapplinkAppVersion

@dynamic clientType;
@dynamic version;
@dynamic content;
@dynamic mandatoryUpdate;
@dynamic display;
@dynamic downloadURL;

typedef struct serviceapplinkAppVersion__storage_ {
  uint32_t _has_storage_[1];
  serviceapplinkClientType clientType;
  NSString *version;
  NSString *content;
  NSString *downloadURL;
} serviceapplinkAppVersion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientType",
        .dataTypeSpecific.enumDescFunc = serviceapplinkClientType_EnumDescriptor,
        .number = serviceapplinkAppVersion_FieldNumber_ClientType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceapplinkAppVersion__storage_, clientType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkAppVersion_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceapplinkAppVersion__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkAppVersion_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceapplinkAppVersion__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mandatoryUpdate",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkAppVersion_FieldNumber_MandatoryUpdate,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "display",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkAppVersion_FieldNumber_Display,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "downloadURL",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkAppVersion_FieldNumber_DownloadURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(serviceapplinkAppVersion__storage_, downloadURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceapplinkAppVersion class]
                                     rootClass:[serviceapplinkApplinkPrimaryApiPassportRoot class]
                                          file:serviceapplinkApplinkPrimaryApiPassportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceapplinkAppVersion__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\010\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t serviceapplinkAppVersion_ClientType_RawValue(serviceapplinkAppVersion *message) {
  GPBDescriptor *descriptor = [serviceapplinkAppVersion descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceapplinkAppVersion_FieldNumber_ClientType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetserviceapplinkAppVersion_ClientType_RawValue(serviceapplinkAppVersion *message, int32_t value) {
  GPBDescriptor *descriptor = [serviceapplinkAppVersion descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:serviceapplinkAppVersion_FieldNumber_ClientType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - serviceapplinkNoticeV2

@implementation serviceapplinkNoticeV2

@dynamic id_p;
@dynamic noticeURL;
@dynamic aspectRatio;
@dynamic weight;

typedef struct serviceapplinkNoticeV2__storage_ {
  uint32_t _has_storage_[1];
  NSString *noticeURL;
  NSString *aspectRatio;
  uint64_t id_p;
  uint64_t weight;
} serviceapplinkNoticeV2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkNoticeV2_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceapplinkNoticeV2__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "noticeURL",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkNoticeV2_FieldNumber_NoticeURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(serviceapplinkNoticeV2__storage_, noticeURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aspectRatio",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkNoticeV2_FieldNumber_AspectRatio,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(serviceapplinkNoticeV2__storage_, aspectRatio),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkNoticeV2_FieldNumber_Weight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(serviceapplinkNoticeV2__storage_, weight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceapplinkNoticeV2 class]
                                     rootClass:[serviceapplinkApplinkPrimaryApiPassportRoot class]
                                          file:serviceapplinkApplinkPrimaryApiPassportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceapplinkNoticeV2__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - serviceapplinkConfig

@implementation serviceapplinkConfig

@dynamic ossProvider;

typedef struct serviceapplinkConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *ossProvider;
} serviceapplinkConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ossProvider",
        .dataTypeSpecific.clazz = Nil,
        .number = serviceapplinkConfig_FieldNumber_OssProvider,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(serviceapplinkConfig__storage_, ossProvider),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[serviceapplinkConfig class]
                                     rootClass:[serviceapplinkApplinkPrimaryApiPassportRoot class]
                                          file:serviceapplinkApplinkPrimaryApiPassportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(serviceapplinkConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
