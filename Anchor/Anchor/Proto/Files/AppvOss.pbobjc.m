// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appv-oss.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "AppvOss.pbobjc.h"
#import "AppvBasic.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(appvapiIdEncode);
GPBObjCClassDeclaration(appvapiOssCallback);
GPBObjCClassDeclaration(appvapiOssCertificateEvent);
GPBObjCClassDeclaration(appvapiOssToken);
GPBObjCClassDeclaration(appvapiOssUploadCallback);
GPBObjCClassDeclaration(appvapiOssUploadCallback_Event);
GPBObjCClassDeclaration(appvapiUploadEvent);

#pragma mark - appvapiAppvOssRoot

@implementation appvapiAppvOssRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - appvapiAppvOssRoot_FileDescriptor

static GPBFileDescriptor *appvapiAppvOssRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"appvapi"
                                                 objcPrefix:@"appvapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum appvapiBucketType

GPBEnumDescriptor *appvapiBucketType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BucketTypeUnspecified\000BucketTypeVideoNor"
        "mal\000BucketTypeImageNormal\000BucketTypeAvat"
        "ar\000BucketTypeImageTag\000BucketTypeShard\000";
    static const int32_t values[] = {
        appvapiBucketType_BucketTypeUnspecified,
        appvapiBucketType_BucketTypeVideoNormal,
        appvapiBucketType_BucketTypeImageNormal,
        appvapiBucketType_BucketTypeAvatar,
        appvapiBucketType_BucketTypeImageTag,
        appvapiBucketType_BucketTypeShard,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(appvapiBucketType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:appvapiBucketType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      
    }
  }
  return descriptor;
}

BOOL appvapiBucketType_IsValidValue(int32_t value__) {
  switch (value__) {
    case appvapiBucketType_BucketTypeUnspecified:
    case appvapiBucketType_BucketTypeVideoNormal:
    case appvapiBucketType_BucketTypeImageNormal:
    case appvapiBucketType_BucketTypeAvatar:
    case appvapiBucketType_BucketTypeImageTag:
    case appvapiBucketType_BucketTypeShard:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - appvapiOssCallback

@implementation appvapiOssCallback

@dynamic callbackURL;
@dynamic callbackHost;
@dynamic callbackBody;
@dynamic callbackBodyType;

typedef struct appvapiOssCallback__storage_ {
  uint32_t _has_storage_[1];
  NSString *callbackURL;
  NSString *callbackHost;
  NSString *callbackBody;
  NSString *callbackBodyType;
} appvapiOssCallback__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "callbackURL",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssCallback_FieldNumber_CallbackURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiOssCallback__storage_, callbackURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callbackHost",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssCallback_FieldNumber_CallbackHost,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiOssCallback__storage_, callbackHost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callbackBody",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssCallback_FieldNumber_CallbackBody,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiOssCallback__storage_, callbackBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callbackBodyType",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssCallback_FieldNumber_CallbackBodyType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(appvapiOssCallback__storage_, callbackBodyType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiOssCallback class]
                                     rootClass:[appvapiAppvOssRoot class]
                                          file:appvapiAppvOssRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiOssCallback__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiOssAuthEvent

@implementation appvapiOssAuthEvent

@dynamic authURL;
@dynamic hasCallback, callback;

typedef struct appvapiOssAuthEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *authURL;
  appvapiOssCallback *callback;
} appvapiOssAuthEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authURL",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssAuthEvent_FieldNumber_AuthURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiOssAuthEvent__storage_, authURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callback",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiOssCallback),
        .number = appvapiOssAuthEvent_FieldNumber_Callback,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiOssAuthEvent__storage_, callback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiOssAuthEvent class]
                                     rootClass:[appvapiAppvOssRoot class]
                                          file:appvapiAppvOssRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiOssAuthEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiOssCertificateEvent

@implementation appvapiOssCertificateEvent

@dynamic hasEventId, eventId;
@dynamic bucketName;
@dynamic objectName;
@dynamic objectOriginalName;
@dynamic hasCallback, callback;

typedef struct appvapiOssCertificateEvent__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *eventId;
  NSString *bucketName;
  NSString *objectName;
  NSString *objectOriginalName;
  appvapiOssCallback *callback;
} appvapiOssCertificateEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eventId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiOssCertificateEvent_FieldNumber_EventId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiOssCertificateEvent__storage_, eventId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bucketName",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssCertificateEvent_FieldNumber_BucketName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiOssCertificateEvent__storage_, bucketName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "objectName",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssCertificateEvent_FieldNumber_ObjectName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiOssCertificateEvent__storage_, objectName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "objectOriginalName",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssCertificateEvent_FieldNumber_ObjectOriginalName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(appvapiOssCertificateEvent__storage_, objectOriginalName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callback",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiOssCallback),
        .number = appvapiOssCertificateEvent_FieldNumber_Callback,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(appvapiOssCertificateEvent__storage_, callback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiOssCertificateEvent class]
                                     rootClass:[appvapiAppvOssRoot class]
                                          file:appvapiAppvOssRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiOssCertificateEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiOssToken

@implementation appvapiOssToken

@dynamic accessKey;
@dynamic secretKey;
@dynamic sessionToken;
@dynamic expiration;

typedef struct appvapiOssToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *accessKey;
  NSString *secretKey;
  NSString *sessionToken;
  uint64_t expiration;
} appvapiOssToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessKey",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssToken_FieldNumber_AccessKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiOssToken__storage_, accessKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "secretKey",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssToken_FieldNumber_SecretKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiOssToken__storage_, secretKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionToken",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssToken_FieldNumber_SessionToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiOssToken__storage_, sessionToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiration",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssToken_FieldNumber_Expiration,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(appvapiOssToken__storage_, expiration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiOssToken class]
                                     rootClass:[appvapiAppvOssRoot class]
                                          file:appvapiAppvOssRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiOssToken__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiOssEvents

@implementation appvapiOssEvents

@dynamic hasOssToken, ossToken;
@dynamic hasBatchId, batchId;
@dynamic fileEventsArray, fileEventsArray_Count;

typedef struct appvapiOssEvents__storage_ {
  uint32_t _has_storage_[1];
  appvapiOssToken *ossToken;
  appvapiIdEncode *batchId;
  NSMutableArray *fileEventsArray;
} appvapiOssEvents__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ossToken",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiOssToken),
        .number = appvapiOssEvents_FieldNumber_OssToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiOssEvents__storage_, ossToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "batchId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiOssEvents_FieldNumber_BatchId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiOssEvents__storage_, batchId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fileEventsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiOssCertificateEvent),
        .number = appvapiOssEvents_FieldNumber_FileEventsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiOssEvents__storage_, fileEventsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiOssEvents class]
                                     rootClass:[appvapiAppvOssRoot class]
                                          file:appvapiAppvOssRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiOssEvents__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiUploadObject

@implementation appvapiUploadObject

@dynamic objectName;
@dynamic bucketType;
@dynamic extInfo;
@dynamic pathUnique;
@dynamic objectPrefix;

typedef struct appvapiUploadObject__storage_ {
  uint32_t _has_storage_[1];
  appvapiBucketType bucketType;
  NSString *objectName;
  NSString *extInfo;
  NSString *objectPrefix;
} appvapiUploadObject__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "objectName",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiUploadObject_FieldNumber_ObjectName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiUploadObject__storage_, objectName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bucketType",
        .dataTypeSpecific.enumDescFunc = appvapiBucketType_EnumDescriptor,
        .number = appvapiUploadObject_FieldNumber_BucketType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiUploadObject__storage_, bucketType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "extInfo",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiUploadObject_FieldNumber_ExtInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiUploadObject__storage_, extInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pathUnique",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiUploadObject_FieldNumber_PathUnique,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "objectPrefix",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiUploadObject_FieldNumber_ObjectPrefix,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(appvapiUploadObject__storage_, objectPrefix),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiUploadObject class]
                                     rootClass:[appvapiAppvOssRoot class]
                                          file:appvapiAppvOssRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiUploadObject__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiUploadObject_BucketType_RawValue(appvapiUploadObject *message) {
  GPBDescriptor *descriptor = [appvapiUploadObject descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiUploadObject_FieldNumber_BucketType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiUploadObject_BucketType_RawValue(appvapiUploadObject *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiUploadObject descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiUploadObject_FieldNumber_BucketType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - appvapiUploadResult

@implementation appvapiUploadResult

@dynamic hasBatchId, batchId;
@dynamic hasOssToken, ossToken;
@dynamic eventsArray, eventsArray_Count;

typedef struct appvapiUploadResult__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *batchId;
  appvapiOssToken *ossToken;
  NSMutableArray *eventsArray;
} appvapiUploadResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "batchId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiUploadResult_FieldNumber_BatchId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiUploadResult__storage_, batchId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ossToken",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiOssToken),
        .number = appvapiUploadResult_FieldNumber_OssToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiUploadResult__storage_, ossToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "eventsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiUploadEvent),
        .number = appvapiUploadResult_FieldNumber_EventsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiUploadResult__storage_, eventsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiUploadResult class]
                                     rootClass:[appvapiAppvOssRoot class]
                                          file:appvapiAppvOssRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiUploadResult__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiUploadEvent

@implementation appvapiUploadEvent

@dynamic hasEventId, eventId;
@dynamic bucketName;
@dynamic objectName;
@dynamic uploadURL;

typedef struct appvapiUploadEvent__storage_ {
  uint32_t _has_storage_[1];
  appvapiIdEncode *eventId;
  NSString *bucketName;
  NSString *objectName;
  NSString *uploadURL;
} appvapiUploadEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eventId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiUploadEvent_FieldNumber_EventId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiUploadEvent__storage_, eventId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bucketName",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiUploadEvent_FieldNumber_BucketName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiUploadEvent__storage_, bucketName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "objectName",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiUploadEvent_FieldNumber_ObjectName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiUploadEvent__storage_, objectName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uploadURL",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiUploadEvent_FieldNumber_UploadURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(appvapiUploadEvent__storage_, uploadURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiUploadEvent class]
                                     rootClass:[appvapiAppvOssRoot class]
                                          file:appvapiAppvOssRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiUploadEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - appvapiOssUploadCallback

@implementation appvapiOssUploadCallback

@dynamic hasBatchId, batchId;
@dynamic passParam;
@dynamic eventsArray, eventsArray_Count;
@dynamic batchStatus;

typedef struct appvapiOssUploadCallback__storage_ {
  uint32_t _has_storage_[1];
  appvapiOssUploadCallback_OssUploadStatus batchStatus;
  appvapiIdEncode *batchId;
  NSString *passParam;
  NSMutableArray *eventsArray;
} appvapiOssUploadCallback__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "batchId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiOssUploadCallback_FieldNumber_BatchId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiOssUploadCallback__storage_, batchId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "passParam",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssUploadCallback_FieldNumber_PassParam,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiOssUploadCallback__storage_, passParam),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "eventsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiOssUploadCallback_Event),
        .number = appvapiOssUploadCallback_FieldNumber_EventsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(appvapiOssUploadCallback__storage_, eventsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "batchStatus",
        .dataTypeSpecific.enumDescFunc = appvapiOssUploadCallback_OssUploadStatus_EnumDescriptor,
        .number = appvapiOssUploadCallback_FieldNumber_BatchStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiOssUploadCallback__storage_, batchStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiOssUploadCallback class]
                                     rootClass:[appvapiAppvOssRoot class]
                                          file:appvapiAppvOssRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiOssUploadCallback__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiOssUploadCallback_BatchStatus_RawValue(appvapiOssUploadCallback *message) {
  GPBDescriptor *descriptor = [appvapiOssUploadCallback descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiOssUploadCallback_FieldNumber_BatchStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiOssUploadCallback_BatchStatus_RawValue(appvapiOssUploadCallback *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiOssUploadCallback descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiOssUploadCallback_FieldNumber_BatchStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum appvapiOssUploadCallback_OssUploadStatus

GPBEnumDescriptor *appvapiOssUploadCallback_OssUploadStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OssUploadStatusUnspecified\000OssUploadStat"
        "usUploading\000OssUploadStatusCancel\000OssUpl"
        "oadStatusClientSyncSuccess\000OssUploadStat"
        "usServerSyncSuccess\000OssUploadStatusSyncT"
        "imeout\000OssUploadStatusClientNetworkError"
        "\000OssUploadStatusClientCrcFailure\000";
    static const int32_t values[] = {
        appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusUnspecified,
        appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusUploading,
        appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusCancel,
        appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusClientSyncSuccess,
        appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusServerSyncSuccess,
        appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusSyncTimeout,
        appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusClientNetworkError,
        appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusClientCrcFailure,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(appvapiOssUploadCallback_OssUploadStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:appvapiOssUploadCallback_OssUploadStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      
    }
  }
  return descriptor;
}

BOOL appvapiOssUploadCallback_OssUploadStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusUnspecified:
    case appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusUploading:
    case appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusCancel:
    case appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusClientSyncSuccess:
    case appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusServerSyncSuccess:
    case appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusSyncTimeout:
    case appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusClientNetworkError:
    case appvapiOssUploadCallback_OssUploadStatus_OssUploadStatusClientCrcFailure:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - appvapiOssUploadCallback_Event

@implementation appvapiOssUploadCallback_Event

@dynamic hasObjectId, objectId;
@dynamic path;
@dynamic ossUploadStatus;
@dynamic extInfo;

typedef struct appvapiOssUploadCallback_Event__storage_ {
  uint32_t _has_storage_[1];
  appvapiOssUploadCallback_OssUploadStatus ossUploadStatus;
  appvapiIdEncode *objectId;
  NSString *path;
  NSString *extInfo;
} appvapiOssUploadCallback_Event__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "objectId",
        .dataTypeSpecific.clazz = GPBObjCClass(appvapiIdEncode),
        .number = appvapiOssUploadCallback_Event_FieldNumber_ObjectId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(appvapiOssUploadCallback_Event__storage_, objectId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "path",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssUploadCallback_Event_FieldNumber_Path,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(appvapiOssUploadCallback_Event__storage_, path),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ossUploadStatus",
        .dataTypeSpecific.enumDescFunc = appvapiOssUploadCallback_OssUploadStatus_EnumDescriptor,
        .number = appvapiOssUploadCallback_Event_FieldNumber_OssUploadStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(appvapiOssUploadCallback_Event__storage_, ossUploadStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "extInfo",
        .dataTypeSpecific.clazz = Nil,
        .number = appvapiOssUploadCallback_Event_FieldNumber_ExtInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(appvapiOssUploadCallback_Event__storage_, extInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[appvapiOssUploadCallback_Event class]
                                     rootClass:[appvapiAppvOssRoot class]
                                          file:appvapiAppvOssRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(appvapiOssUploadCallback_Event__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(appvapiOssUploadCallback)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t appvapiOssUploadCallback_Event_OssUploadStatus_RawValue(appvapiOssUploadCallback_Event *message) {
  GPBDescriptor *descriptor = [appvapiOssUploadCallback_Event descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiOssUploadCallback_Event_FieldNumber_OssUploadStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetappvapiOssUploadCallback_Event_OssUploadStatus_RawValue(appvapiOssUploadCallback_Event *message, int32_t value) {
  GPBDescriptor *descriptor = [appvapiOssUploadCallback_Event descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:appvapiOssUploadCallback_Event_FieldNumber_OssUploadStatus];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
